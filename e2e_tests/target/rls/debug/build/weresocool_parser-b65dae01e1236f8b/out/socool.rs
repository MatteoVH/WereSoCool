// auto-generated: "lalrpop 0.17.2"
// sha256: fbaf30de77a2954fd7746e84f58d66318c14f8797df7bf3716cf9f58b3674994
use num_rational::{Rational64};
use std::str::FromStr;
use std::string::String;
use weresocool_ast::{
    ast::{
        Defs,
        Op,
        Op::*,
        Term,
        is_choice_op,
        ASR,
        FunDef,
        ListOp,
        Indices, 
        Index,
        IndexList 
    },
};
use crate::parser::Init;
use crate::et::et;
use crate::float_to_rational::helpers::*;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__SoCool {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens)]

    use num_rational::{Rational64};
    use std::str::FromStr;
    use std::string::String;
    use weresocool_ast::{
    ast::{
        Defs,
        Op,
        Op::*,
        Term,
        is_choice_op,
        ASR,
        FunDef,
        ListOp,
        Indices, 
        Index,
        IndexList 
    },
};
    use crate::parser::Init;
    use crate::et::et;
    use crate::float_to_rational::helpers::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    use super::__intern_token::Token;
    #[allow(dead_code)]
    pub enum __Symbol<'input>
     {
        Variant0(&'input str),
        Variant1(::std::option::Option<&'input str>),
        Variant2(Term),
        Variant3(::std::vec::Vec<Term>),
        Variant4(Index),
        Variant5(::std::vec::Vec<Index>),
        Variant6(i64),
        Variant7(::std::vec::Vec<i64>),
        Variant8(()),
        Variant9(::std::vec::Vec<()>),
        Variant10(String),
        Variant11(::std::vec::Vec<String>),
        Variant12(Vec<Index>),
        Variant13(Vec<i64>),
        Variant14(Vec<String>),
        Variant15(Vec<Term>),
        Variant16(::std::option::Option<Term>),
        Variant17(::std::option::Option<Index>),
        Variant18(Indices),
        Variant19(::std::option::Option<i64>),
        Variant20(Vec<()>),
        Variant21(::std::option::Option<String>),
        Variant22(Init),
        Variant23(Rational64),
    }
    const __ACTION: &'static [i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 13, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        -118, -118, -118, -118, 0, 0, 0, -118, -118, -118, -118, -118, -118, -118, 0, -118, -118, 0, -118, -118, -118, -118, -118, -118, -118, -118, -118, 0, -118, -118, -118, -118, -118, -118, -118, -118, -118, 0, -118, 0, 0, 0, 0, 0, 0, -118, -118, -118, -118, -118,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -20,
        // State 12
        0, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 10,
        // State 14
        0, 0, -139, -139, 0, 0, 0, 0, -139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -139, -139, 0, 0, 0, 0, 0, -139, -139, 0, 0, 0,
        // State 15
        0, 0, -140, -140, 0, 28, 0, 0, -140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -140, -140, 0, 0, 0, 0, 0, -140, -140, 0, 0, 0,
        // State 16
        0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, -93, -93, 0, 0, 0, 0, -93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0, 0, 0, -93, -93, 0, 0, 0,
        // State 18
        0, 0, -103, -103, 0, -103, 0, 0, -103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -103, -103, 0, 0, 0, 0, 0, -103, -103, 0, 0, 0,
        // State 19
        0, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        // State 20
        0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, -74, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -109,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, -76, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 34
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 35
        45, 46, -134, -134, 0, 0, 0, 0, -134, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -134, 0, 0, 0, 0, 0, 0, 0, -134, 18, 19, 10,
        // State 36
        0, 0, -88, -88, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, 0, 0, 0, 0, 0, -89, -88, 0, 0, 0,
        // State 37
        0, 0, -124, -124, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0, 0, 0, 0, 0, -124, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
        // State 39
        0, 0, -125, -125, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -125, 0, 0, 0, 0, 0, 0, -90, -125, 0, 0, 0,
        // State 40
        0, 83, -62, -62, 0, 0, 0, 0, -62, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -62, 0, 0, 0, 0, 0, 0, -62, -62, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
        // State 42
        0, 0, -87, -87, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        // State 45
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 46
        0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, -40, -40, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, -40, -40, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 50
        0, 0, -45, -45, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -45, 0, 0, 0, 0, 0, 0, -45, -45, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, -43, -43, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -43, 0, 0, 0, 0, 0, 0, -43, -43, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 60
        0, 0, -44, -44, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -44, 0, 0, 0, 0, 0, 0, -44, -44, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 64
        0, 0, -41, -41, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, -41, -41, 0, 0, 0,
        // State 65
        0, 0, -42, -42, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -42, 0, 0, 0, 0, 0, 0, -42, -42, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 68
        0, 0, -141, -141, 0, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -141, -141, 0, 0, 0, 0, 0, -141, -141, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 70
        0, 0, -25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 73
        0, 0, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        45, 46, -81, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -81, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, -78, 115, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, -89, -89, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, 0, 0, 0, 0, 0, -89, -89, 0, 0, 0,
        // State 79
        0, 0, -133, -133, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -133, 0, 0, 0, 0, 0, 0, 117, -133, 0, 0, 0,
        // State 80
        0, 0, -90, -90, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, 0, 0, 0, 0, 0, -90, -90, 0, 0, 0,
        // State 81
        -4, -4, -4, -4, 0, 0, 0, 0, -4, 0, -4, -4, -4, -4, 0, -4, -4, 0, -4, -4, -4, -4, -4, -4, -4, -4, -4, 0, -4, -4, -4, -4, -4, -4, -4, -4, -4, 0, -4, 0, 0, 0, 0, 0, 0, 0, -4, -4, -4, -4,
        // State 82
        45, 46, -79, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 119, 0, 0, 0, 0, 120, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -108,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 86
        0, 0, -63, -63, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -63, 0, 0, 0, 0, 0, 0, -63, -63, 0, 0, 0,
        // State 87
        0, 0, 123, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 89
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 90
        0, 0, -55, -55, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, -55, -55, 0, 0, 0,
        // State 91
        0, 0, -54, -54, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, -54, -54, 0, 0, 0,
        // State 92
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 93
        0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 95
        0, 0, -53, -53, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -53, 0, 0, 0, 0, 0, 0, -53, -53, 0, 0, 0,
        // State 96
        0, 0, -52, -52, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -52, 0, 0, 0, 0, 0, 0, -52, -52, 0, 0, 0,
        // State 97
        0, 0, -48, -48, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, 0, 0, 0, 0, 0, -48, -48, 0, 0, 0,
        // State 98
        0, 0, -46, -46, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -46, 0, 0, 0, 0, 0, 0, -46, -46, 0, 0, 0,
        // State 99
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 100
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 101
        0, 0, -49, -49, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -49, 0, 0, 0, 0, 0, 0, -49, -49, 0, 0, 0,
        // State 102
        0, 0, -51, -51, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -51, 0, 0, 0, 0, 0, 0, -51, -51, 0, 0, 0,
        // State 103
        0, 0, -50, -50, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -50, 0, 0, 0, 0, 0, 0, -50, -50, 0, 0, 0,
        // State 104
        0, 0, 0, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, 0, 0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -96, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0,
        // State 111
        0, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, -116, -116, 0, 0, 0, 0, -116, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -116, 0, 0, 0, 0, 0, 0, -116, -116, 0, 0, -116,
        // State 113
        0, 0, -80, 143, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        -29, -29, -29, 0, 0, 0, 0, 0, 0, 0, -29, -29, -29, -29, 0, -29, -29, 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, 0, -29, -29, -29, -29, -29, -29, -29, -29, -29, 0, -29, 0, 0, 0, 0, 0, 0, 0, 0, -29, -29, -29,
        // State 115
        0, 0, -114, -114, 0, 0, 0, 0, -114, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -114, 0, 0, 0, 0, 0, 0, -114, -114, 0, 0, -114,
        // State 116
        -5, -5, -5, -5, 0, 0, 0, 0, -5, 0, -5, -5, -5, -5, 0, -5, -5, 0, -5, -5, -5, -5, -5, -5, -5, -5, -5, 0, -5, -5, -5, -5, -5, -5, -5, -5, -5, 0, -5, 0, 0, 0, 0, 0, 0, 0, -5, -5, -5, -5,
        // State 117
        0, 0, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10,
        // State 119
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 120
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 121
        0, 0, -65, -65, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, -65, -65, 0, 0, 0,
        // State 122
        0, 0, -39, -39, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, -39, -39, 0, 0, 0,
        // State 123
        0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0,
        // State 136
        0, 0, 0, 161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0,
        // State 138
        0, 0, -115, -115, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -115, 0, 0, 0, 0, 0, 0, -115, -115, 0, 0, -115,
        // State 139
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        -30, -30, -30, 0, 0, 0, 0, 0, 0, 0, -30, -30, -30, -30, 0, -30, -30, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, 0, -30, -30, -30, -30, -30, -30, -30, -30, -30, 0, -30, 0, 0, 0, 0, 0, 0, 0, 0, -30, -30, -30,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, -64, -64, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, -64, -64, 0, 0, 0,
        // State 145
        45, 46, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 49, 25, 0, 50, 51, 0, 52, 26, 53, 54, 55, 56, 57, 58, 59, 0, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 10,
        // State 146
        0, 0, -121, -121, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0, 0, 0, 0, 0, -121, 0, 0, 0,
        // State 147
        0, 0, -123, -123, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0, 0, 0, 0, 0, -123, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 149
        0, 0, -56, -56, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, -56, -56, 0, 0, 0,
        // State 150
        0, 0, -60, -60, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -60, 0, 0, 0, 0, 0, 0, -60, -60, 0, 0, 0,
        // State 151
        0, 0, 0, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        0, 0, -61, -61, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -61, 0, 0, 0, 0, 0, 0, -61, -61, 0, 0, 0,
        // State 154
        0, 0, 0, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, -59, -59, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -59, 0, 0, 0, 0, 0, 0, -59, -59, 0, 0, 0,
        // State 156
        0, 0, -58, -58, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, -58, -58, 0, 0, 0,
        // State 157
        0, 0, -57, -57, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, -57, -57, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -107,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10, 0,
        // State 161
        0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        0, 0, 171, 172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 164
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 165
        0, 0, -122, -122, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0, 0, 0, 0, 0, -122, 0, 0, 0,
        // State 166
        0, 0, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 169
        0, 0, 0, 177, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 179, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0,
        // State 175
        0, 0, 0, 182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0,
        // State 177
        0, 0, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, -117, -117, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -117, 0, 0, 0, 0, 0, 0, -117, -117, 0, 0, -117,
        // State 179
        0, 0, -113, -113, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -113, 0, 0, 0, 0, 0, 0, -113, -113, 0, 0, -113,
        // State 180
        0, 0, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 183
        0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 184
        0, 0, -47, -47, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -47, 0, 0, 0, 0, 0, 0, -47, -47, 0, 0, 0,
        // State 185
        0, 0, 0, 188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 189, 0, 0, 0,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 19, 0,
        // State 188
        0, 0, 0, 0, 0, 0, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -138,
        // State 189
        0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137,
        // State 191
        0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    const __EOF_ACTION: &'static [i16] = &[
        // State 0
        0,
        // State 1
        -111,
        // State 2
        -143,
        // State 3
        0,
        // State 4
        -112,
        // State 5
        -19,
        // State 6
        -142,
        // State 7
        -110,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        -20,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        -109,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        0,
        // State 50
        0,
        // State 51
        0,
        // State 52
        0,
        // State 53
        0,
        // State 54
        0,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        -108,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        0,
        // State 96
        0,
        // State 97
        0,
        // State 98
        0,
        // State 99
        0,
        // State 100
        0,
        // State 101
        0,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        -116,
        // State 113
        0,
        // State 114
        0,
        // State 115
        -114,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        -115,
        // State 139
        0,
        // State 140
        0,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        0,
        // State 151
        0,
        // State 152
        0,
        // State 153
        0,
        // State 154
        0,
        // State 155
        0,
        // State 156
        0,
        // State 157
        0,
        // State 158
        0,
        // State 159
        -107,
        // State 160
        0,
        // State 161
        0,
        // State 162
        0,
        // State 163
        0,
        // State 164
        0,
        // State 165
        0,
        // State 166
        0,
        // State 167
        0,
        // State 168
        0,
        // State 169
        0,
        // State 170
        0,
        // State 171
        0,
        // State 172
        0,
        // State 173
        0,
        // State 174
        0,
        // State 175
        0,
        // State 176
        0,
        // State 177
        0,
        // State 178
        -117,
        // State 179
        -113,
        // State 180
        0,
        // State 181
        0,
        // State 182
        0,
        // State 183
        0,
        // State 184
        0,
        // State 185
        0,
        // State 186
        0,
        // State 187
        0,
        // State 188
        -138,
        // State 189
        0,
        // State 190
        -137,
        // State 191
        0,
    ];
    const __GOTO: &'static [i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 3, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 8, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 15
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 17
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 19
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 20
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 21
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 22
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 26
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 42, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 30
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 31
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 32
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 33
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 34
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 76, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 78, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 35
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 80, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 81, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
        // State 36
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 37
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 38
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 39
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 40
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 45
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 88, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0,
        // State 57
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 110, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 114, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 75
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 118, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 83
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0,
        // State 86
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 0, 0,
        // State 89
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 76, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 125, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 90
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 76, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 126, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 93
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 0, 130, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 76, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 132, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 76, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 133, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 100
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 37, 0, 0, 0, 76, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 77, 0, 134, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 105
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 38, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 40, 41, 0, 136, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 106
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 114
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 147, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 81, 41, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 120
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0,
        // State 131
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 162, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 81, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 166, 39, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 81, 41, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 44, 0, 0,
        // State 146
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 157
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 158
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0,
        // State 159
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 160
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 161
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 162
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 163
        0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 173, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 164
        0, 0, 0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 0, 174, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 165
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 166
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 167
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 168
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
        // State 169
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 170
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 171
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 172
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 173
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 174
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 175
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 176
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 177
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 178
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 179
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 180
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 181
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 0, 0,
        // State 182
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 0, 0,
        // State 183
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 184
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 185
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 186
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 187
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 0, 0,
        // State 188
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 189
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 190
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 191
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    fn __expected_tokens(__state: usize) -> Vec<::std::string::String> {
        const __TERMINAL: &'static [&'static str] = &[
            r###""#""###,
            r###""(""###,
            r###"")""###,
            r###"",""###,
            r###"".""###,
            r###""/""###,
            r###"";""###,
            r###""=""###,
            r###"">""###,
            r###""@""###,
            r###""AD""###,
            r###""AsIs""###,
            r###""Choice""###,
            r###""ET""###,
            r###""FitLength""###,
            r###""Gain""###,
            r###""Invert""###,
            r###""LazyRepeat""###,
            r###""Length""###,
            r###""List""###,
            r###""ModulateBy""###,
            r###""Noise""###,
            r###""O""###,
            r###""Overlay""###,
            r###""PanA""###,
            r###""PanM""###,
            r###""Portamento""###,
            r###""Random""###,
            r###""Repeat""###,
            r###""Reverse""###,
            r###""Seq""###,
            r###""Sequence""###,
            r###""Silence""###,
            r###""Sine""###,
            r###""Square""###,
            r###""Ta""###,
            r###""Tm""###,
            r###""[""###,
            r###""]""###,
            r###""^""###,
            r###""f:""###,
            r###""g:""###,
            r###""l:""###,
            r###""p:""###,
            r###""{""###,
            r###""|""###,
            r###""}""###,
            r###"r#"-?(0|([1-9]\\d*))\\.\\d+"#"###,
            r###"r#"-?[0-9]+"#"###,
            r###"r#"[a-z_][a-zA-Z_0-9.]*"#"###,
        ];
        __ACTION[(__state * 50)..].iter().zip(__TERMINAL).filter_map(|(&state, terminal)| {
            if state == 0 {
                None
            } else {
                Some(terminal.to_string())
            }
        }).collect()
    }
    pub struct __StateMachine<'input, 'defs, 'err>
    where 
    {
        defs: &'defs mut Defs,
        input: &'input str,
        __phantom: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    }
    impl<'input, 'defs, 'err> __state_machine::ParserDefinition for __StateMachine<'input, 'defs, 'err>
    where 
    {
        type Location = usize;
        type Error = &'static str;
        type Token = Token<'input>;
        type TokenIndex = usize;
        type Symbol = __Symbol<'input>;
        type Success = Init;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, ::std::marker::PhantomData::<(&(), &(), &())>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __ACTION[(state as usize) * 50 + integer]
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __ACTION[(state as usize) * 50 + (50 - 1)]
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __GOTO[(state as usize) * 59 + nt] - 1
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, ::std::marker::PhantomData::<(&(), &(), &())>)
        }

        fn expected_tokens(&self, state: i16) -> Vec<String> {
            __expected_tokens(state as usize)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut Vec<i16>,
            symbols: &mut Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.defs,
                self.input,
                action,
                start_location,
                states,
                symbols,
                ::std::marker::PhantomData::<(&(), &(), &())>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            __simulate_reduce(action, ::std::marker::PhantomData::<(&(), &(), &())>)
        }
    }
    fn __token_to_integer<
        'input,
        'defs,
        'err,
    >(
        __token: &Token<'input>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> Option<usize>
    {
        match *__token {
            Token(3, _) if true => Some(0),
            Token(4, _) if true => Some(1),
            Token(5, _) if true => Some(2),
            Token(6, _) if true => Some(3),
            Token(7, _) if true => Some(4),
            Token(8, _) if true => Some(5),
            Token(9, _) if true => Some(6),
            Token(10, _) if true => Some(7),
            Token(11, _) if true => Some(8),
            Token(12, _) if true => Some(9),
            Token(13, _) if true => Some(10),
            Token(14, _) if true => Some(11),
            Token(15, _) if true => Some(12),
            Token(16, _) if true => Some(13),
            Token(17, _) if true => Some(14),
            Token(18, _) if true => Some(15),
            Token(19, _) if true => Some(16),
            Token(20, _) if true => Some(17),
            Token(21, _) if true => Some(18),
            Token(22, _) if true => Some(19),
            Token(23, _) if true => Some(20),
            Token(24, _) if true => Some(21),
            Token(25, _) if true => Some(22),
            Token(26, _) if true => Some(23),
            Token(27, _) if true => Some(24),
            Token(28, _) if true => Some(25),
            Token(29, _) if true => Some(26),
            Token(30, _) if true => Some(27),
            Token(31, _) if true => Some(28),
            Token(32, _) if true => Some(29),
            Token(33, _) if true => Some(30),
            Token(34, _) if true => Some(31),
            Token(35, _) if true => Some(32),
            Token(36, _) if true => Some(33),
            Token(37, _) if true => Some(34),
            Token(38, _) if true => Some(35),
            Token(39, _) if true => Some(36),
            Token(40, _) if true => Some(37),
            Token(41, _) if true => Some(38),
            Token(42, _) if true => Some(39),
            Token(43, _) if true => Some(40),
            Token(44, _) if true => Some(41),
            Token(45, _) if true => Some(42),
            Token(46, _) if true => Some(43),
            Token(47, _) if true => Some(44),
            Token(48, _) if true => Some(45),
            Token(49, _) if true => Some(46),
            Token(0, _) if true => Some(47),
            Token(1, _) if true => Some(48),
            Token(2, _) if true => Some(49),
            _ => None,
        }
    }
    fn __token_to_symbol<
        'input,
        'defs,
        'err,
    >(
        __token_index: usize,
        __token: Token<'input>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> __Symbol<'input>
    {
        match __token_index {
            0 => match __token {
                Token(3, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            1 => match __token {
                Token(4, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            2 => match __token {
                Token(5, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            3 => match __token {
                Token(6, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            4 => match __token {
                Token(7, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            5 => match __token {
                Token(8, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            6 => match __token {
                Token(9, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            7 => match __token {
                Token(10, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            8 => match __token {
                Token(11, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            9 => match __token {
                Token(12, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            10 => match __token {
                Token(13, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            11 => match __token {
                Token(14, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            12 => match __token {
                Token(15, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            13 => match __token {
                Token(16, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            14 => match __token {
                Token(17, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            15 => match __token {
                Token(18, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            16 => match __token {
                Token(19, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            17 => match __token {
                Token(20, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            18 => match __token {
                Token(21, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            19 => match __token {
                Token(22, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            20 => match __token {
                Token(23, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            21 => match __token {
                Token(24, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            22 => match __token {
                Token(25, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            23 => match __token {
                Token(26, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            24 => match __token {
                Token(27, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            25 => match __token {
                Token(28, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            26 => match __token {
                Token(29, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            27 => match __token {
                Token(30, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            28 => match __token {
                Token(31, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            29 => match __token {
                Token(32, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            30 => match __token {
                Token(33, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            31 => match __token {
                Token(34, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            32 => match __token {
                Token(35, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            33 => match __token {
                Token(36, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            34 => match __token {
                Token(37, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            35 => match __token {
                Token(38, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            36 => match __token {
                Token(39, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            37 => match __token {
                Token(40, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            38 => match __token {
                Token(41, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            39 => match __token {
                Token(42, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            40 => match __token {
                Token(43, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            41 => match __token {
                Token(44, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            42 => match __token {
                Token(45, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            43 => match __token {
                Token(46, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            44 => match __token {
                Token(47, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            45 => match __token {
                Token(48, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            46 => match __token {
                Token(49, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            47 => match __token {
                Token(0, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            48 => match __token {
                Token(1, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            49 => match __token {
                Token(2, __tok0) => __Symbol::Variant0((__tok0)),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    fn __simulate_reduce<
        'input,
        'defs,
        'err,
    >(
        __reduce_index: i16,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> __state_machine::SimulatedReduce<__StateMachine<'input, 'defs, 'err>>
    {
        match __reduce_index {
            0 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 0,
                }
            }
            1 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 0,
                }
            }
            2 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 1,
                }
            }
            3 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 2,
                }
            }
            4 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 2,
                }
            }
            5 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 3,
                }
            }
            6 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 4,
                }
            }
            7 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 4,
                }
            }
            8 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 5,
                }
            }
            9 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 5,
                }
            }
            10 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 6,
                }
            }
            11 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 7,
                }
            }
            12 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 7,
                }
            }
            13 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 8,
                }
            }
            14 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 8,
                }
            }
            15 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 9,
                }
            }
            16 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 10,
                }
            }
            17 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 10,
                }
            }
            18 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 11,
                }
            }
            19 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 11,
                }
            }
            20 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 12,
                }
            }
            21 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 13,
                }
            }
            22 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 13,
                }
            }
            23 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 14,
                }
            }
            24 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 14,
                }
            }
            25 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 15,
                }
            }
            26 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 16,
                }
            }
            27 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 16,
                }
            }
            28 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 17,
                }
            }
            29 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 17,
                }
            }
            30 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 18,
                }
            }
            31 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 19,
                }
            }
            32 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 19,
                }
            }
            33 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 20,
                }
            }
            34 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 21,
                }
            }
            35 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 21,
                }
            }
            36 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 22,
                }
            }
            37 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 22,
                }
            }
            38 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 23,
                }
            }
            39 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            40 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            41 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            42 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            43 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            44 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            45 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            46 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 23,
                }
            }
            47 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            48 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            49 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            50 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            51 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            52 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            53 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            54 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            55 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            56 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            57 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            58 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            59 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            60 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            61 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 23,
                }
            }
            62 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 23,
                }
            }
            63 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 23,
                }
            }
            64 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 23,
                }
            }
            65 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            66 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 24,
                }
            }
            67 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 24,
                }
            }
            68 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 24,
                }
            }
            69 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            70 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 25,
                }
            }
            71 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 25,
                }
            }
            72 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 25,
                }
            }
            73 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            74 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 26,
                }
            }
            75 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 26,
                }
            }
            76 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 26,
                }
            }
            77 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            78 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 27,
                }
            }
            79 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 27,
                }
            }
            80 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 27,
                }
            }
            81 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            82 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 28,
                }
            }
            83 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 28,
                }
            }
            84 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 28,
                }
            }
            85 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 29,
                }
            }
            86 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            87 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 30,
                }
            }
            88 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            89 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 31,
                }
            }
            90 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 32,
                }
            }
            91 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 32,
                }
            }
            92 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 33,
                }
            }
            93 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 34,
                }
            }
            94 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 34,
                }
            }
            95 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 35,
                }
            }
            96 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 35,
                }
            }
            97 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 35,
                }
            }
            98 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 6,
                    nonterminal_produced: 35,
                }
            }
            99 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 36,
                }
            }
            100 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 36,
                }
            }
            101 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 37,
                }
            }
            102 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 38,
                }
            }
            103 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 39,
                }
            }
            104 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 39,
                }
            }
            105 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 40,
                }
            }
            106 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 41,
                }
            }
            107 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 41,
                }
            }
            108 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 41,
                }
            }
            109 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 42,
                }
            }
            110 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 43,
                }
            }
            111 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 43,
                }
            }
            112 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 44,
                }
            }
            113 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 44,
                }
            }
            114 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 44,
                }
            }
            115 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 44,
                }
            }
            116 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 8,
                    nonterminal_produced: 44,
                }
            }
            117 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 45,
                }
            }
            118 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 46,
                }
            }
            119 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 46,
                }
            }
            120 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 47,
                }
            }
            121 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 5,
                    nonterminal_produced: 47,
                }
            }
            122 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 4,
                    nonterminal_produced: 47,
                }
            }
            123 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            124 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 47,
                }
            }
            125 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 48,
                }
            }
            126 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 48,
                }
            }
            127 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 49,
                }
            }
            128 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 9,
                    nonterminal_produced: 50,
                }
            }
            129 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 51,
                }
            }
            130 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 0,
                    nonterminal_produced: 51,
                }
            }
            131 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 52,
                }
            }
            132 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 53,
                }
            }
            133 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 53,
                }
            }
            134 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 54,
                }
            }
            135 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 54,
                }
            }
            136 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 14,
                    nonterminal_produced: 55,
                }
            }
            137 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 13,
                    nonterminal_produced: 55,
                }
            }
            138 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            139 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 1,
                    nonterminal_produced: 56,
                }
            }
            140 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 3,
                    nonterminal_produced: 56,
                }
            }
            141 => {
                __state_machine::SimulatedReduce::Reduce {
                    states_to_pop: 2,
                    nonterminal_produced: 57,
                }
            }
            142 => __state_machine::SimulatedReduce::Accept,
            _ => panic!("invalid reduction index {}", __reduce_index)
        }
    }
    pub struct SoCoolParser {
        builder: super::__intern_token::__MatcherBuilder,
        _priv: (),
    }

    impl SoCoolParser {
        pub fn new() -> SoCoolParser {
            let __builder = super::__intern_token::__MatcherBuilder::new();
            SoCoolParser {
                builder: __builder,
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub fn parse<
            'input,
            'defs,
            'err,
        >(
            &self,
            defs: &'defs mut Defs,
            input: &'input str,
        ) -> Result<Init, __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>
        {
            let mut __tokens = self.builder.matcher(input);
            let __r = __state_machine::Parser::drive(
                __StateMachine {
                    defs,
                    input,
                    __phantom: ::std::marker::PhantomData::<(&(), &(), &())>,
                },
                __tokens,
            );
            __r
        }
    }
    pub(crate) fn __reduce<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> Option<Result<Init,__lalrpop_util::ParseError<usize, Token<'input>, &'static str>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            1 => {
                __reduce1(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            2 => {
                __reduce2(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            3 => {
                __reduce3(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            4 => {
                __reduce4(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            5 => {
                __reduce5(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            6 => {
                __reduce6(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            7 => {
                __reduce7(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            8 => {
                __reduce8(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            9 => {
                __reduce9(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            10 => {
                __reduce10(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            11 => {
                __reduce11(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            12 => {
                __reduce12(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            13 => {
                __reduce13(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            14 => {
                __reduce14(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            15 => {
                __reduce15(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            16 => {
                __reduce16(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            17 => {
                __reduce17(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            18 => {
                __reduce18(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            19 => {
                __reduce19(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            20 => {
                __reduce20(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            21 => {
                __reduce21(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            22 => {
                __reduce22(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            23 => {
                __reduce23(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            24 => {
                __reduce24(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            25 => {
                __reduce25(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            26 => {
                __reduce26(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            27 => {
                __reduce27(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            28 => {
                __reduce28(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            29 => {
                __reduce29(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            30 => {
                __reduce30(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            31 => {
                __reduce31(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            32 => {
                __reduce32(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            33 => {
                __reduce33(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            34 => {
                __reduce34(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            35 => {
                __reduce35(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            36 => {
                __reduce36(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            37 => {
                __reduce37(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            38 => {
                __reduce38(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            39 => {
                __reduce39(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            40 => {
                __reduce40(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            41 => {
                __reduce41(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            42 => {
                __reduce42(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            43 => {
                __reduce43(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            44 => {
                __reduce44(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            45 => {
                __reduce45(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            46 => {
                __reduce46(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            47 => {
                __reduce47(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            48 => {
                __reduce48(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            49 => {
                __reduce49(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            50 => {
                __reduce50(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            51 => {
                __reduce51(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            52 => {
                __reduce52(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            53 => {
                __reduce53(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            54 => {
                __reduce54(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            55 => {
                __reduce55(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            56 => {
                __reduce56(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            57 => {
                __reduce57(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            58 => {
                __reduce58(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            59 => {
                __reduce59(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            60 => {
                __reduce60(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            61 => {
                __reduce61(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            62 => {
                __reduce62(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            63 => {
                __reduce63(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            64 => {
                __reduce64(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            65 => {
                __reduce65(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            66 => {
                __reduce66(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            67 => {
                __reduce67(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            68 => {
                __reduce68(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            69 => {
                __reduce69(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            70 => {
                __reduce70(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            71 => {
                __reduce71(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            72 => {
                __reduce72(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            73 => {
                __reduce73(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            74 => {
                __reduce74(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            75 => {
                __reduce75(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            76 => {
                __reduce76(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            77 => {
                __reduce77(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            78 => {
                __reduce78(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            79 => {
                __reduce79(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            80 => {
                __reduce80(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            81 => {
                __reduce81(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            82 => {
                __reduce82(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            83 => {
                __reduce83(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            84 => {
                __reduce84(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            85 => {
                __reduce85(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            86 => {
                __reduce86(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            87 => {
                __reduce87(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            88 => {
                __reduce88(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            89 => {
                __reduce89(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            90 => {
                __reduce90(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            91 => {
                __reduce91(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            92 => {
                __reduce92(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            93 => {
                __reduce93(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            94 => {
                __reduce94(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            95 => {
                __reduce95(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            96 => {
                __reduce96(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            97 => {
                __reduce97(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            98 => {
                __reduce98(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            99 => {
                __reduce99(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            100 => {
                __reduce100(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            101 => {
                __reduce101(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            102 => {
                __reduce102(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            103 => {
                __reduce103(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            104 => {
                __reduce104(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            105 => {
                __reduce105(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            106 => {
                __reduce106(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            107 => {
                __reduce107(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            108 => {
                __reduce108(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            109 => {
                __reduce109(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            110 => {
                __reduce110(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            111 => {
                __reduce111(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            112 => {
                __reduce112(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            113 => {
                __reduce113(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            114 => {
                __reduce114(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            115 => {
                __reduce115(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            116 => {
                __reduce116(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            117 => {
                __reduce117(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            118 => {
                __reduce118(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            119 => {
                __reduce119(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            120 => {
                __reduce120(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            121 => {
                __reduce121(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            122 => {
                __reduce122(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            123 => {
                __reduce123(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            124 => {
                __reduce124(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            125 => {
                __reduce125(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            126 => {
                __reduce126(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            127 => {
                __reduce127(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            128 => {
                __reduce128(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            129 => {
                __reduce129(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            130 => {
                __reduce130(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            131 => {
                __reduce131(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            132 => {
                __reduce132(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            133 => {
                __reduce133(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            134 => {
                __reduce134(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            135 => {
                __reduce135(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            136 => {
                __reduce136(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            137 => {
                __reduce137(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            138 => {
                __reduce138(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            139 => {
                __reduce139(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            140 => {
                __reduce140(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            141 => {
                __reduce141(defs, input, __action, __lookahead_start, __states, __symbols, ::std::marker::PhantomData::<(&(), &(), &())>)
            }
            142 => {
                // __SoCool = SoCool => ActionFn(0);
                let __sym0 = __pop_Variant22(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(defs, input, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap() as usize;
        let __next_state = __GOTO[__state * 59 + __nonterminal] - 1;
        __states.push(__next_state);
        None
    }
    fn __pop_Variant8<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, (), usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant8(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant4<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Index, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant4(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant18<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Indices, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant18(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant22<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Init, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant22(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant23<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Rational64, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant23(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant10<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, String, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant10(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant2<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Term, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant2(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant20<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<()>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant20(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant12<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Index>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant12(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant14<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<String>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant14(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant15<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<Term>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant15(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant13<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, Vec<i64>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant13(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant6<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, i64, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant6(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant17<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<Index>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant17(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant21<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<String>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant21(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant16<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<Term>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant16(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant19<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<i64>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant19(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant1<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::option::Option<&'input str>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant1(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant9<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<()>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant9(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant5<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Index>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant5(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant11<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<String>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant11(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant3<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<Term>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant3(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant7<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, ::std::vec::Vec<i64>, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant7(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    fn __pop_Variant0<
      'input,
    >(
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>
    ) -> (usize, &'input str, usize)
     {
        match __symbols.pop().unwrap() {
            (__l, __Symbol::Variant0(__v), __r) => (__l, __v, __r),
            _ => panic!("symbol type mismatch")
        }
    }
    pub(crate) fn __reduce0<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // ";"? = ";" => ActionFn(74);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action74::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 0)
    }
    pub(crate) fn __reduce1<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // ";"? =  => ActionFn(75);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action75::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (0, 0)
    }
    pub(crate) fn __reduce2<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Composeable> "|") = Composeable, "|" => ActionFn(93);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action93::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce3<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Composeable> "|")+ = Composeable, "|" => ActionFn(126);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Composeable> "|")+ = (<Composeable> "|")+, Composeable, "|" => ActionFn(127);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action127::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 2)
    }
    pub(crate) fn __reduce5<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Index> ",") = Index, "," => ActionFn(88);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action88::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 3)
    }
    pub(crate) fn __reduce6<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Index> ",")* =  => ActionFn(86);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action86::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 4)
    }
    pub(crate) fn __reduce7<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Index> ",")* = (<Index> ",")+ => ActionFn(87);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action87::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (1, 4)
    }
    pub(crate) fn __reduce8<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Index> ",")+ = Index, "," => ActionFn(128);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action128::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Index> ",")+ = (<Index> ",")+, Index, "," => ActionFn(129);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action129::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (3, 5)
    }
    pub(crate) fn __reduce10<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Int> ",") = Int, "," => ActionFn(111);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action111::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 6)
    }
    pub(crate) fn __reduce11<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Int> ",")* =  => ActionFn(109);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action109::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 7)
    }
    pub(crate) fn __reduce12<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Int> ",")* = (<Int> ",")+ => ActionFn(110);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action110::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 7)
    }
    pub(crate) fn __reduce13<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Int> ",")+ = Int, "," => ActionFn(132);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action132::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Int> ",")+ = (<Int> ",")+, Int, "," => ActionFn(133);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action133::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 8)
    }
    pub(crate) fn __reduce15<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<LetDef>) = LetDef => ActionFn(78);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action78::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<LetDef>)* =  => ActionFn(76);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action76::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 10)
    }
    pub(crate) fn __reduce17<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<LetDef>)* = (<LetDef>)+ => ActionFn(77);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action77::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 10)
    }
    pub(crate) fn __reduce18<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<LetDef>)+ = LetDef => ActionFn(136);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action136::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 11)
    }
    pub(crate) fn __reduce19<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<LetDef>)+ = (<LetDef>)+, LetDef => ActionFn(137);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action137::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 11)
    }
    pub(crate) fn __reduce20<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",") = Name, "," => ActionFn(83);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action83::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 12)
    }
    pub(crate) fn __reduce21<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")* =  => ActionFn(81);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action81::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 13)
    }
    pub(crate) fn __reduce22<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")* = (<Name> ",")+ => ActionFn(82);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action82::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce23<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")+ = Name, "," => ActionFn(140);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action140::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 14)
    }
    pub(crate) fn __reduce24<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Name> ",")+ = (<Name> ",")+, Name, "," => ActionFn(141);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action141::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 14)
    }
    pub(crate) fn __reduce25<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> ",") = Operation, "," => ActionFn(96);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action96::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 15)
    }
    pub(crate) fn __reduce26<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> ",")* =  => ActionFn(94);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action94::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 16)
    }
    pub(crate) fn __reduce27<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> ",")* = (<Operation> ",")+ => ActionFn(95);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action95::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce28<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> ",")+ = Operation, "," => ActionFn(144);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action144::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 17)
    }
    pub(crate) fn __reduce29<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> ",")+ = (<Operation> ",")+, Operation, "," => ActionFn(145);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action145::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce30<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> "|") = Operation, "|" => ActionFn(106);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action106::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 18)
    }
    pub(crate) fn __reduce31<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> "|")+ = Operation, "|" => ActionFn(148);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action148::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce32<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Operation> "|")+ = (<Operation> "|")+, Operation, "|" => ActionFn(149);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action149::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce33<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Overtone> ",") = Overtone, "," => ActionFn(101);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action101::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 20)
    }
    pub(crate) fn __reduce34<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Overtone> ",")* =  => ActionFn(99);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action99::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce35<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Overtone> ",")* = (<Overtone> ",")+ => ActionFn(100);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 21)
    }
    pub(crate) fn __reduce36<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Overtone> ",")+ = Overtone, "," => ActionFn(150);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action150::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (2, 22)
    }
    pub(crate) fn __reduce37<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // (<Overtone> ",")+ = (<Overtone> ",")+, Overtone, "," => ActionFn(151);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action151::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce38<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "(", Operation, ")" => ActionFn(26);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action26::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce39<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "AsIs" => ActionFn(27);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce40<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Sine" => ActionFn(28);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce41<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Square" => ActionFn(29);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce42<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Noise" => ActionFn(30);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action30::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce43<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Reverse" => ActionFn(31);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action31::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce44<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Invert" => ActionFn(32);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action32::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce45<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Repeat", Int => ActionFn(33);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action33::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce46<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "AD", "(", Rational, ",", Rational, ",", Int, ")" => ActionFn(34);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant6(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant23(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant23(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action34::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (8, 23)
    }
    pub(crate) fn __reduce47<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Portamento", Rational => ActionFn(35);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action35::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce48<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Silence", Rational => ActionFn(36);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action36::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce49<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Tm", Rational => ActionFn(37);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action37::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce50<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Ta", Rational => ActionFn(38);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action38::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce51<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "PanM", Rational => ActionFn(39);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action39::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce52<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "PanA", Rational => ActionFn(40);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action40::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce53<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Length", Rational => ActionFn(41);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action41::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce54<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Gain", Rational => ActionFn(42);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action42::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce55<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Choice", "[", Operations, "]" => ActionFn(43);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action43::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce56<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Sequence", "[", Operations, "]" => ActionFn(44);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action44::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce57<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Seq", "[", Operations, "]" => ActionFn(45);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action45::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce58<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "Overlay", "[", Operations, "]" => ActionFn(46);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action46::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce59<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "ModulateBy", "[", Operations, "]" => ActionFn(47);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action47::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce60<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "O", "[", Overtones, "]" => ActionFn(48);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action48::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce61<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = Name => ActionFn(49);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action49::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce62<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = "#", Name => ActionFn(50);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action50::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (2, 23)
    }
    pub(crate) fn __reduce63<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = Name, "(", Comma<Operation>, ")" => ActionFn(51);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action51::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 23)
    }
    pub(crate) fn __reduce64<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // BaseOperation = Rational, "^", Rational => ActionFn(52);
        let __sym2 = __pop_Variant23(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action52::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (3, 23)
    }
    pub(crate) fn __reduce65<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Index> = Index => ActionFn(156);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action156::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce66<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Index> =  => ActionFn(157);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action157::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 24)
    }
    pub(crate) fn __reduce67<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Index> = (<Index> ",")+, Index => ActionFn(158);
        let __sym1 = __pop_Variant4(__symbols);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action158::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (2, 24)
    }
    pub(crate) fn __reduce68<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Index> = (<Index> ",")+ => ActionFn(159);
        let __sym0 = __pop_Variant5(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action159::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce69<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Int> = Int => ActionFn(160);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action160::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce70<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Int> =  => ActionFn(161);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action161::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce71<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Int> = (<Int> ",")+, Int => ActionFn(162);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action162::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce72<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Int> = (<Int> ",")+ => ActionFn(163);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action163::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce73<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Name> = Name => ActionFn(164);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action164::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce74<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Name> =  => ActionFn(165);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action165::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce75<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Name> = (<Name> ",")+, Name => ActionFn(166);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action166::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce76<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Name> = (<Name> ",")+ => ActionFn(167);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action167::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce77<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Operation> = Operation => ActionFn(168);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action168::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce78<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Operation> =  => ActionFn(169);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action169::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce79<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Operation> = (<Operation> ",")+, Operation => ActionFn(170);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action170::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce80<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Operation> = (<Operation> ",")+ => ActionFn(171);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action171::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce81<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Overtone> = Overtone => ActionFn(174);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action174::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce82<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Overtone> =  => ActionFn(175);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action175::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 28)
    }
    pub(crate) fn __reduce83<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Overtone> = (<Overtone> ",")+, Overtone => ActionFn(176);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action176::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 28)
    }
    pub(crate) fn __reduce84<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Comma<Overtone> = (<Overtone> ",")+ => ActionFn(177);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action177::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce85<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Compose = Pipe<Operation> => ActionFn(57);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action57::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce86<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // ComposeOperation = Pipe<Composeable> => ActionFn(22);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce87<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // ComposeOperation = BaseOperation => ActionFn(23);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action23::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce88<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Composeable = BaseOperation => ActionFn(24);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action24::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce89<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Composeable = List => ActionFn(25);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce90<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Composeable? = Composeable => ActionFn(89);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action89::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce91<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Composeable? =  => ActionFn(90);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action90::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 32)
    }
    pub(crate) fn __reduce92<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Float = r#"-?(0|([1-9]\\d*))\\.\\d+"# => ActionFn(64);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action64::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce93<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Import = Name, ".", Name => ActionFn(55);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action55::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 34)
    }
    pub(crate) fn __reduce94<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Import = Name => ActionFn(56);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action56::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce95<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Index = Int => ActionFn(18);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action18::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce96<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Index = Int, "|", Composeable => ActionFn(19);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action19::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (3, 35)
    }
    pub(crate) fn __reduce97<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Index = "Random", "(", Int, ")" => ActionFn(20);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action20::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (4, 35)
    }
    pub(crate) fn __reduce98<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Index = "Random", "(", Int, ",", Int, ")" => ActionFn(21);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action21::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (6, 35)
    }
    pub(crate) fn __reduce99<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Index? = Index => ActionFn(84);
        let __sym0 = __pop_Variant4(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action84::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce100<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Index? =  => ActionFn(85);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action85::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 36)
    }
    pub(crate) fn __reduce101<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Indices = Comma<Index> => ActionFn(17);
        let __sym0 = __pop_Variant12(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action17::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce102<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Int = r#"-?[0-9]+"# => ActionFn(65);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action65::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce103<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Int? = Int => ActionFn(107);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action107::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce104<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Int? =  => ActionFn(108);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action108::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 39)
    }
    pub(crate) fn __reduce105<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Ints = Comma<Int> => ActionFn(59);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action59::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce106<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // LetDef = Name, "(", Comma<Name>, ")", "=", "{", Operation, "}" => ActionFn(4);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant2(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant14(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action4::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (8, 41)
    }
    pub(crate) fn __reduce107<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // LetDef = Name, "=", "{", Operation, "}" => ActionFn(5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action5::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (5, 41)
    }
    pub(crate) fn __reduce108<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // LetDef = Name, "=", List => ActionFn(6);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action6::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (3, 41)
    }
    pub(crate) fn __reduce109<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // LetDefs = Lets<LetDef> => ActionFn(3);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action3::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 42)
    }
    pub(crate) fn __reduce110<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lets<LetDef> =  => ActionFn(138);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action138::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (0, 43)
    }
    pub(crate) fn __reduce111<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Lets<LetDef> = (<LetDef>)+ => ActionFn(139);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action139::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce112<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // List = "List", "[", Operations, "]", "@", "[", Indices, "]" => ActionFn(12);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action12::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (8, 44)
    }
    pub(crate) fn __reduce113<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // List = "List", "[", Operations, "]" => ActionFn(13);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant15(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action13::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 44)
    }
    pub(crate) fn __reduce114<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // List = Name, "@", "[", Indices, "]" => ActionFn(14);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant18(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action14::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (5, 44)
    }
    pub(crate) fn __reduce115<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // List = "ET", "(", Int, ")" => ActionFn(15);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action15::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 44)
    }
    pub(crate) fn __reduce116<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // List = "ET", "(", Int, ")", "@", "[", Indices, "]" => ActionFn(16);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant18(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym7.2.clone();
        let __nt = super::__action16::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (8, 44)
    }
    pub(crate) fn __reduce117<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Name = r#"[a-z_][a-zA-Z_0-9.]*"# => ActionFn(63);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action63::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 45)
    }
    pub(crate) fn __reduce118<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Name? = Name => ActionFn(79);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action79::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 46)
    }
    pub(crate) fn __reduce119<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Name? =  => ActionFn(80);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action80::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 46)
    }
    pub(crate) fn __reduce120<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation = Operation, ">", "FitLength", ComposeOperation => ActionFn(7);
        let __sym3 = __pop_Variant2(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action7::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce121<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation = Operation, ">", "@", Name, ComposeOperation => ActionFn(8);
        let __sym4 = __pop_Variant2(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action8::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (5, 47)
    }
    pub(crate) fn __reduce122<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation = Operation, ">", "LazyRepeat", Int => ActionFn(9);
        let __sym3 = __pop_Variant6(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action9::<>(defs, input, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (4, 47)
    }
    pub(crate) fn __reduce123<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation = ComposeOperation => ActionFn(10);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action10::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce124<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation = List => ActionFn(11);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action11::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 47)
    }
    pub(crate) fn __reduce125<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation? = Operation => ActionFn(102);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action102::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 48)
    }
    pub(crate) fn __reduce126<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operation? =  => ActionFn(103);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action103::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 48)
    }
    pub(crate) fn __reduce127<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Operations = Comma<Operation> => ActionFn(58);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action58::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 49)
    }
    pub(crate) fn __reduce128<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Overtone = "(", Rational, ",", Rational, ",", Rational, ",", Rational, ")" => ActionFn(53);
        let __sym8 = __pop_Variant0(__symbols);
        let __sym7 = __pop_Variant23(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant23(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant23(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym8.2.clone();
        let __nt = super::__action53::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (9, 50)
    }
    pub(crate) fn __reduce129<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Overtone? = Overtone => ActionFn(97);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action97::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 51)
    }
    pub(crate) fn __reduce130<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Overtone? =  => ActionFn(98);
        let __start = __symbols.last().map(|s| s.2.clone()).unwrap_or_default();
        let __end = __lookahead_start.cloned().unwrap_or_else(|| __start.clone());
        let __nt = super::__action98::<>(defs, input, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 51)
    }
    pub(crate) fn __reduce131<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Overtones = Comma<Overtone> => ActionFn(54);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action54::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 52)
    }
    pub(crate) fn __reduce132<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Pipe<Composeable> = (<Composeable> "|")+, Composeable => ActionFn(154);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action154::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 53)
    }
    pub(crate) fn __reduce133<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Pipe<Composeable> = (<Composeable> "|")+ => ActionFn(155);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action155::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 53)
    }
    pub(crate) fn __reduce134<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Pipe<Operation> = (<Operation> "|")+, Operation => ActionFn(172);
        let __sym1 = __pop_Variant2(__symbols);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action172::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 54)
    }
    pub(crate) fn __reduce135<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Pipe<Operation> = (<Operation> "|")+ => ActionFn(173);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action173::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 54)
    }
    pub(crate) fn __reduce136<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Point = "{", "f:", Rational, ",", "l:", Rational, ",", "g:", Rational, ",", "p:", Rational, "}", ";" => ActionFn(124);
        let __sym13 = __pop_Variant0(__symbols);
        let __sym12 = __pop_Variant0(__symbols);
        let __sym11 = __pop_Variant23(__symbols);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant23(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant23(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant23(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym13.2.clone();
        let __nt = super::__action124::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11, __sym12, __sym13);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (14, 55)
    }
    pub(crate) fn __reduce137<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Point = "{", "f:", Rational, ",", "l:", Rational, ",", "g:", Rational, ",", "p:", Rational, "}" => ActionFn(125);
        let __sym12 = __pop_Variant0(__symbols);
        let __sym11 = __pop_Variant23(__symbols);
        let __sym10 = __pop_Variant0(__symbols);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant23(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant23(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant23(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym12.2.clone();
        let __nt = super::__action125::<>(defs, input, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9, __sym10, __sym11, __sym12);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (13, 55)
    }
    pub(crate) fn __reduce138<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Rational = Float => ActionFn(60);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action60::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce139<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Rational = Int => ActionFn(61);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action61::<>(defs, input, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 56)
    }
    pub(crate) fn __reduce140<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // Rational = Int, "/", Int => ActionFn(62);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action62::<>(defs, input, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (3, 56)
    }
    pub(crate) fn __reduce141<
        'input,
        'defs,
        'err,
    >(
        defs: &'defs mut Defs,
        input: &'input str,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut ::std::vec::Vec<i16>,
        __symbols: &mut ::std::vec::Vec<(usize,__Symbol<'input>,usize)>,
        _: ::std::marker::PhantomData<(&'input (), &'defs (), &'err ())>,
    ) -> (usize, usize)
    {
        // SoCool = Point, LetDefs => ActionFn(1);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant22(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action1::<>(defs, input, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (2, 57)
    }
}
pub use self::__parse__SoCool::SoCoolParser;
#[cfg_attr(rustfmt, rustfmt_skip)]
mod __intern_token {
    #![allow(unused_imports)]
    use num_rational::{Rational64};
    use std::str::FromStr;
    use std::string::String;
    use weresocool_ast::{
    ast::{
        Defs,
        Op,
        Op::*,
        Term,
        is_choice_op,
        ASR,
        FunDef,
        ListOp,
        Indices, 
        Index,
        IndexList 
    },
};
    use crate::parser::Init;
    use crate::et::et;
    use crate::float_to_rational::helpers::*;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate regex as __regex;
    use std::fmt as __fmt;

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]
    pub struct Token<'input>(pub usize, pub &'input str);
    impl<'a> __fmt::Display for Token<'a> {
        fn fmt<'f>(&self, formatter: &mut __fmt::Formatter<'f>) -> Result<(), __fmt::Error> {
            __fmt::Display::fmt(self.1, formatter)
        }
    }

    pub struct __MatcherBuilder {
        regex_set: __regex::RegexSet,
        regex_vec: Vec<__regex::Regex>,
    }

    impl __MatcherBuilder {
        pub fn new() -> __MatcherBuilder {
            let __strs: &[&str] = &[
                "^(\\-?(0|([1-9][0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９𐒠-𐒩𐴰-𐴹𑁦-𑁯𑃰-𑃹𑄶-𑄿𑇐-𑇙𑋰-𑋹𑑐-𑑙𑓐-𑓙𑙐-𑙙𑛀-𑛉𑜰-𑜹𑣠-𑣩𑱐-𑱙𑵐-𑵙𑶠-𑶩𖩠-𖩩𖭐-𖭙𝟎-𝟿𞅀-𞅉𞋰-𞋹𞥐-𞥙]*))\\.[0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９𐒠-𐒩𐴰-𐴹𑁦-𑁯𑃰-𑃹𑄶-𑄿𑇐-𑇙𑋰-𑋹𑑐-𑑙𑓐-𑓙𑙐-𑙙𑛀-𑛉𑜰-𑜹𑣠-𑣩𑱐-𑱙𑵐-𑵙𑶠-𑶩𖩠-𖩩𖭐-𖭙𝟎-𝟿𞅀-𞅉𞋰-𞋹𞥐-𞥙]+)",
                "^(\\-?[0-9]+)",
                "^([_a-z][\\.0-9A-Z_a-z]*)",
                "^(\\#)",
                "^(\\()",
                "^(\\))",
                "^(,)",
                "^(\\.)",
                "^(/)",
                "^(;)",
                "^(=)",
                "^(>)",
                "^(@)",
                "^(AD)",
                "^(AsIs)",
                "^(Choice)",
                "^(ET)",
                "^(FitLength)",
                "^(Gain)",
                "^(Invert)",
                "^(LazyRepeat)",
                "^(Length)",
                "^(List)",
                "^(ModulateBy)",
                "^(Noise)",
                "^(O)",
                "^(Overlay)",
                "^(PanA)",
                "^(PanM)",
                "^(Portamento)",
                "^(Random)",
                "^(Repeat)",
                "^(Reverse)",
                "^(Seq)",
                "^(Sequence)",
                "^(Silence)",
                "^(Sine)",
                "^(Square)",
                "^(Ta)",
                "^(Tm)",
                "^(\\[)",
                "^(\\])",
                "^(\\^)",
                "^(f:)",
                "^(g:)",
                "^(l:)",
                "^(p:)",
                "^(\\{)",
                "^(\\|)",
                "^(\\})",
            ];
            let __regex_set = __regex::RegexSet::new(__strs).unwrap();
            let __regex_vec = vec![
                __regex::Regex::new("^(\\-?(0|([1-9][0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９𐒠-𐒩𐴰-𐴹𑁦-𑁯𑃰-𑃹𑄶-𑄿𑇐-𑇙𑋰-𑋹𑑐-𑑙𑓐-𑓙𑙐-𑙙𑛀-𑛉𑜰-𑜹𑣠-𑣩𑱐-𑱙𑵐-𑵙𑶠-𑶩𖩠-𖩩𖭐-𖭙𝟎-𝟿𞅀-𞅉𞋰-𞋹𞥐-𞥙]*))\\.[0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９𐒠-𐒩𐴰-𐴹𑁦-𑁯𑃰-𑃹𑄶-𑄿𑇐-𑇙𑋰-𑋹𑑐-𑑙𑓐-𑓙𑙐-𑙙𑛀-𑛉𑜰-𑜹𑣠-𑣩𑱐-𑱙𑵐-𑵙𑶠-𑶩𖩠-𖩩𖭐-𖭙𝟎-𝟿𞅀-𞅉𞋰-𞋹𞥐-𞥙]+)").unwrap(),
                __regex::Regex::new("^(\\-?[0-9]+)").unwrap(),
                __regex::Regex::new("^([_a-z][\\.0-9A-Z_a-z]*)").unwrap(),
                __regex::Regex::new("^(\\#)").unwrap(),
                __regex::Regex::new("^(\\()").unwrap(),
                __regex::Regex::new("^(\\))").unwrap(),
                __regex::Regex::new("^(,)").unwrap(),
                __regex::Regex::new("^(\\.)").unwrap(),
                __regex::Regex::new("^(/)").unwrap(),
                __regex::Regex::new("^(;)").unwrap(),
                __regex::Regex::new("^(=)").unwrap(),
                __regex::Regex::new("^(>)").unwrap(),
                __regex::Regex::new("^(@)").unwrap(),
                __regex::Regex::new("^(AD)").unwrap(),
                __regex::Regex::new("^(AsIs)").unwrap(),
                __regex::Regex::new("^(Choice)").unwrap(),
                __regex::Regex::new("^(ET)").unwrap(),
                __regex::Regex::new("^(FitLength)").unwrap(),
                __regex::Regex::new("^(Gain)").unwrap(),
                __regex::Regex::new("^(Invert)").unwrap(),
                __regex::Regex::new("^(LazyRepeat)").unwrap(),
                __regex::Regex::new("^(Length)").unwrap(),
                __regex::Regex::new("^(List)").unwrap(),
                __regex::Regex::new("^(ModulateBy)").unwrap(),
                __regex::Regex::new("^(Noise)").unwrap(),
                __regex::Regex::new("^(O)").unwrap(),
                __regex::Regex::new("^(Overlay)").unwrap(),
                __regex::Regex::new("^(PanA)").unwrap(),
                __regex::Regex::new("^(PanM)").unwrap(),
                __regex::Regex::new("^(Portamento)").unwrap(),
                __regex::Regex::new("^(Random)").unwrap(),
                __regex::Regex::new("^(Repeat)").unwrap(),
                __regex::Regex::new("^(Reverse)").unwrap(),
                __regex::Regex::new("^(Seq)").unwrap(),
                __regex::Regex::new("^(Sequence)").unwrap(),
                __regex::Regex::new("^(Silence)").unwrap(),
                __regex::Regex::new("^(Sine)").unwrap(),
                __regex::Regex::new("^(Square)").unwrap(),
                __regex::Regex::new("^(Ta)").unwrap(),
                __regex::Regex::new("^(Tm)").unwrap(),
                __regex::Regex::new("^(\\[)").unwrap(),
                __regex::Regex::new("^(\\])").unwrap(),
                __regex::Regex::new("^(\\^)").unwrap(),
                __regex::Regex::new("^(f:)").unwrap(),
                __regex::Regex::new("^(g:)").unwrap(),
                __regex::Regex::new("^(l:)").unwrap(),
                __regex::Regex::new("^(p:)").unwrap(),
                __regex::Regex::new("^(\\{)").unwrap(),
                __regex::Regex::new("^(\\|)").unwrap(),
                __regex::Regex::new("^(\\})").unwrap(),
            ];
            __MatcherBuilder { regex_set: __regex_set, regex_vec: __regex_vec }
        }
        pub fn matcher<'input, 'builder>(&'builder self, s: &'input str) -> __Matcher<'input, 'builder> {
            __Matcher {
                text: s,
                consumed: 0,
                regex_set: &self.regex_set,
                regex_vec: &self.regex_vec,
            }
        }
    }

    pub struct __Matcher<'input, 'builder> {
        text: &'input str,
        consumed: usize,
        regex_set: &'builder __regex::RegexSet,
        regex_vec: &'builder Vec<__regex::Regex>,
    }

    impl<'input, 'builder> Iterator for __Matcher<'input, 'builder> {
        type Item = Result<(usize, Token<'input>, usize), __lalrpop_util::ParseError<usize,Token<'input>,&'static str>>;

        fn next(&mut self) -> Option<Self::Item> {
            let __text = self.text.trim_start();
            let __whitespace = self.text.len() - __text.len();
            let __start_offset = self.consumed + __whitespace;
            if __text.is_empty() {
                self.text = __text;
                self.consumed = __start_offset;
                None
            } else {
                let __matches = self.regex_set.matches(__text);
                if !__matches.matched_any() {
                    Some(Err(__lalrpop_util::ParseError::InvalidToken {
                        location: __start_offset,
                    }))
                } else {
                    let mut __longest_match = 0;
                    let mut __index = 0;
                    for __i in 0 .. 50 {
                        if __matches.matched(__i) {
                            let __match = self.regex_vec[__i].find(__text).unwrap();
                            let __len = __match.end();
                            if __len >= __longest_match {
                                __longest_match = __len;
                                __index = __i;
                            }
                        }
                    }
                    let __result = &__text[..__longest_match];
                    let __remaining = &__text[__longest_match..];
                    let __end_offset = __start_offset + __longest_match;
                    self.text = __remaining;
                    self.consumed = __end_offset;
                    Some(Ok((__start_offset, Token(__index, __result), __end_offset)))
                }
            }
        }
    }
}
pub use self::__intern_token::Token;

#[allow(unused_variables)]
fn __action0<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Init, usize),
) -> Init
{
    (__0)
}

#[allow(unused_variables)]
fn __action1<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, init, _): (usize, Init, usize),
    (_, l, _): (usize, Vec<()>, usize),
) -> Init
{
    { init }
}

#[allow(unused_variables)]
fn __action2<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, f, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, l, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, g, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, ::std::option::Option<&'input str>, usize),
) -> Init
{
    Init { f, l, g, p }
}

#[allow(unused_variables)]
fn __action3<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Vec<()>, usize),
) -> Vec<()>
{
    (__0)
}

#[allow(unused_variables)]
fn __action4<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, s, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, vars, _): (usize, Vec<String>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, o, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> ()
{
    {
         defs.terms.insert(
             s.clone(),
             Term::FunDef(FunDef {
                 name: s,
                 vars: vars,
                 term: Box::new(o)
             })
         );
        ()
    }
}

#[allow(unused_variables)]
fn __action5<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, s, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, o, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> ()
{
    {
        defs.terms.insert(s.clone(), o); ()
    }
}

#[allow(unused_variables)]
fn __action6<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, name, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, list, _): (usize, Term, usize),
) -> ()
{
    {
        defs.lists.insert(name.clone(), list); ()
    }
}

#[allow(unused_variables)]
fn __action7<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, op1, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, op2, _): (usize, Term, usize),
) -> Term
{
    {
        Term::Op(
            Op::Compose { operations:
            vec![op1.clone(), Term::Op(WithLengthRatioOf { with_length_of: Box::new(op2), main: Box::new(op1) })]
        })
    }
}

#[allow(unused_variables)]
fn __action8<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, op1, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, name, _): (usize, String, usize),
    (_, op2, _): (usize, Term, usize),
) -> Term
{
    {
        Term::Op(
            Focus {
                name: name,
                main: Box::new(op1.clone()),
                op_to_apply: Box::new(op2.clone()),
            }
        )
    }
}

#[allow(unused_variables)]
fn __action9<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, op1, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, i64, usize),
) -> Term
{
    {
        let mut op = Term::Op(AsIs);
        if is_choice_op(op1.clone(), defs) {
            op = op1
        }
        let mut vec = Vec::new();
        for x in 0..i {
            vec.push(op.clone())
        }
        Term::Op(Sequence { operations: vec })
    }
}

#[allow(unused_variables)]
fn __action10<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, op, _): (usize, Term, usize),
) -> Term
{
    op
}

#[allow(unused_variables)]
fn __action11<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, list, _): (usize, Term, usize),
) -> Term
{
    list
}

#[allow(unused_variables)]
fn __action12<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, terms, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, indices, _): (usize, Indices, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    {
    Term::Lop(
      ListOp::IndexedList { 
        terms, 
        indices
      }
    )
  }
}

#[allow(unused_variables)]
fn __action13<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, operations, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    {
    Term::Lop(ListOp::List(operations))
  }
}

#[allow(unused_variables)]
fn __action14<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, name, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, indices, _): (usize, Indices, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    {
    Term::Lop(
      ListOp::IndexedNamedList { 
        name, 
        indices
      }
    )
  }
}

#[allow(unused_variables)]
fn __action15<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, int, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Lop(ListOp::List(et(int)))
}

#[allow(unused_variables)]
fn __action16<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, int, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, indices, _): (usize, Indices, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    {
    Term::Lop(
      ListOp::IndexedList { 
        terms: et(int), 
        indices  
      }
    )
  }
}

#[allow(unused_variables)]
fn __action17<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, indices, _): (usize, Vec<Index>, usize),
) -> Indices
{
    Indices::IndexList(IndexList::new(indices))
}

#[allow(unused_variables)]
fn __action18<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, index, _): (usize, i64, usize),
) -> Index
{
    Index::Index(index)
}

#[allow(unused_variables)]
fn __action19<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, index, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, term, _): (usize, Term, usize),
) -> Index
{
    Index::IndexAndTerm {index, term}
}

#[allow(unused_variables)]
fn __action20<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, index, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Index
{
    Index::Random(index, None)
}

#[allow(unused_variables)]
fn __action21<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, index, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, seed, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Index
{
    Index::Random(index, Some(seed))
}

#[allow(unused_variables)]
fn __action22<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, ops, _): (usize, Vec<Term>, usize),
) -> Term
{
    Term::Op(Compose { operations: ops })
}

#[allow(unused_variables)]
fn __action23<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, o, _): (usize, Term, usize),
) -> Term
{
    o
}

#[allow(unused_variables)]
fn __action24<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, base_operation, _): (usize, Term, usize),
) -> Term
{
    base_operation
}

#[allow(unused_variables)]
fn __action25<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, list, _): (usize, Term, usize),
) -> Term
{
    list
}

#[allow(unused_variables)]
fn __action26<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, o, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    o
}

#[allow(unused_variables)]
fn __action27<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(AsIs {})
}

#[allow(unused_variables)]
fn __action28<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Sine {})
}

#[allow(unused_variables)]
fn __action29<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Square {})
}

#[allow(unused_variables)]
fn __action30<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Noise {})
}

#[allow(unused_variables)]
fn __action31<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Reverse {})
}

#[allow(unused_variables)]
fn __action32<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(FInvert)
}

#[allow(unused_variables)]
fn __action33<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, i, _): (usize, i64, usize),
) -> Term
{
    {
        let mut vec = Vec::new();
        for x in 0..i {
            vec.push(Term::Op(AsIs))
        }
        Term::Op(Sequence { operations: vec })
    }
}

#[allow(unused_variables)]
fn __action34<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, attack, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, decay, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, decay_type, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    { 
          let asr = if decay_type == 2 {ASR::Long} else {ASR::Short};
          Term::Op(AD {attack, decay, asr})
        }
}

#[allow(unused_variables)]
fn __action35<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(Portamento {m: v})
}

#[allow(unused_variables)]
fn __action36<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(Silence {m: v})
}

#[allow(unused_variables)]
fn __action37<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(TransposeM {m: v})
}

#[allow(unused_variables)]
fn __action38<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(TransposeA {a: v})
}

#[allow(unused_variables)]
fn __action39<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(PanM {m: v})
}

#[allow(unused_variables)]
fn __action40<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(PanA {a: v})
}

#[allow(unused_variables)]
fn __action41<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(Length {m: v})
}

#[allow(unused_variables)]
fn __action42<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, v, _): (usize, Rational64, usize),
) -> Term
{
    Term::Op(Gain {m: v})
}

#[allow(unused_variables)]
fn __action43<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, operations, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Choice { operations: operations })
}

#[allow(unused_variables)]
fn __action44<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, operations, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Sequence { operations: operations })
}

#[allow(unused_variables)]
fn __action45<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, operations, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Sequence { operations: operations })
}

#[allow(unused_variables)]
fn __action46<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, operations, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Overlay { operations: operations })
}

#[allow(unused_variables)]
fn __action47<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, operations, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(ModulateBy { operations: operations })
}

#[allow(unused_variables)]
fn __action48<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, o, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Overlay { operations: o })
}

#[allow(unused_variables)]
fn __action49<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, id, _): (usize, String, usize),
) -> Term
{
    {
        Term::Op(Id(id))
    }
}

#[allow(unused_variables)]
fn __action50<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, name, _): (usize, String, usize),
) -> Term
{
    Term::Op(Tag(name))
}

#[allow(unused_variables)]
fn __action51<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, name, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, args, _): (usize, Vec<Term>, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    {
        Term::Op(
            FunctionCall {
                name,
                args
            }
        )
    }
}

#[allow(unused_variables)]
fn __action52<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, tm, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, length, _): (usize, Rational64, usize),
) -> Term
{
    {
        Term::Op(Compose { operations: vec! [
            Term::Op(TransposeM { m: tm }),
            Term::Op(Length { m: length }),
        ]})
    }
}

#[allow(unused_variables)]
fn __action53<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, _, _): (usize, &'input str, usize),
    (_, fm, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, fa, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, g, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, p, _): (usize, Rational64, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    Term::Op(Compose { operations: vec! [
            Term::Op(TransposeM { m: fm }),
            Term::Op(TransposeA { a: fa }),
            Term::Op(Gain { m: g }),
            Term::Op(PanA { a: p }),
        ]
    })
}

#[allow(unused_variables)]
fn __action54<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Vec<Term>, usize),
) -> Vec<Term>
{
    (__0)
}

#[allow(unused_variables)]
fn __action55<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, a, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, b, _): (usize, String, usize),
) -> Vec<String>
{
    vec![a, b]
}

#[allow(unused_variables)]
fn __action56<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, a, _): (usize, String, usize),
) -> Vec<String>
{
    vec![a]
}

#[allow(unused_variables)]
fn __action57<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Vec<Term>, usize),
) -> Vec<Term>
{
    (__0)
}

#[allow(unused_variables)]
fn __action58<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Vec<Term>, usize),
) -> Vec<Term>
{
    (__0)
}

#[allow(unused_variables)]
fn __action59<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Vec<i64>, usize),
) -> Vec<i64>
{
    (__0)
}

#[allow(unused_variables)]
fn __action60<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, n, _): (usize, String, usize),
) -> Rational64
{
    f32_to_rational(n)
}

#[allow(unused_variables)]
fn __action61<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, n, _): (usize, i64, usize),
) -> Rational64
{
    Rational64::new(n, 1)
}

#[allow(unused_variables)]
fn __action62<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, n, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
    (_, d, _): (usize, i64, usize),
) -> Rational64
{
    Rational64::new(n, d)
}

#[allow(unused_variables)]
fn __action63<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, s, _): (usize, &'input str, usize),
) -> String
{
    s.to_string()
}

#[allow(unused_variables)]
fn __action64<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, s, _): (usize, &'input str, usize),
) -> String
{
    s.to_string()
}

#[allow(unused_variables)]
fn __action65<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, s, _): (usize, &'input str, usize),
) -> i64
{
    i64::from_str(s).unwrap()
}

#[allow(unused_variables)]
fn __action66<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<i64>, usize),
    (_, e, _): (usize, ::std::option::Option<i64>, usize),
) -> Vec<i64>
{
    match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action67<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    match e {
        None=> v,
        Some(e) => {
          let mut v = v;
          v.push(e);
          v
        }
    }
}

#[allow(unused_variables)]
fn __action68<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action69<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action70<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    match e {
        None=> v,
        Some(e) => {
          let mut v = v;
          v.push(e);
          v
        }
    }
}

#[allow(unused_variables)]
fn __action71<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Index>, usize),
    (_, e, _): (usize, ::std::option::Option<Index>, usize),
) -> Vec<Index>
{
    match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action72<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<String>, usize),
    (_, e, _): (usize, ::std::option::Option<String>, usize),
) -> Vec<String>
{
    match e {
        None=> v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

#[allow(unused_variables)]
fn __action73<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<()>, usize),
) -> Vec<()>
{
    v
}

#[allow(unused_variables)]
fn __action74<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, &'input str, usize),
) -> ::std::option::Option<&'input str>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action75<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<&'input str>
{
    None
}

#[allow(unused_variables)]
fn __action76<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<()>
{
    vec![]
}

#[allow(unused_variables)]
fn __action77<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<()>, usize),
) -> ::std::vec::Vec<()>
{
    v
}

#[allow(unused_variables)]
fn __action78<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, (), usize),
) -> ()
{
    (__0)
}

#[allow(unused_variables)]
fn __action79<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> ::std::option::Option<String>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action80<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<String>
{
    None
}

#[allow(unused_variables)]
fn __action81<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<String>
{
    vec![]
}

#[allow(unused_variables)]
fn __action82<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<String>, usize),
) -> ::std::vec::Vec<String>
{
    v
}

#[allow(unused_variables)]
fn __action83<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
    (_, _, _): (usize, &'input str, usize),
) -> String
{
    (__0)
}

#[allow(unused_variables)]
fn __action84<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Index, usize),
) -> ::std::option::Option<Index>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action85<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Index>
{
    None
}

#[allow(unused_variables)]
fn __action86<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Index>
{
    vec![]
}

#[allow(unused_variables)]
fn __action87<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Index>, usize),
) -> ::std::vec::Vec<Index>
{
    v
}

#[allow(unused_variables)]
fn __action88<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Index, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Index
{
    (__0)
}

#[allow(unused_variables)]
fn __action89<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::option::Option<Term>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action90<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Term>
{
    None
}

#[allow(unused_variables)]
fn __action91<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action92<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action93<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    (__0)
}

#[allow(unused_variables)]
fn __action94<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Term>
{
    vec![]
}

#[allow(unused_variables)]
fn __action95<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
) -> ::std::vec::Vec<Term>
{
    v
}

#[allow(unused_variables)]
fn __action96<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    (__0)
}

#[allow(unused_variables)]
fn __action97<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::option::Option<Term>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action98<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Term>
{
    None
}

#[allow(unused_variables)]
fn __action99<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<Term>
{
    vec![]
}

#[allow(unused_variables)]
fn __action100<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
) -> ::std::vec::Vec<Term>
{
    v
}

#[allow(unused_variables)]
fn __action101<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    (__0)
}

#[allow(unused_variables)]
fn __action102<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::option::Option<Term>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action103<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<Term>
{
    None
}

#[allow(unused_variables)]
fn __action104<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action105<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action106<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
    (_, _, _): (usize, &'input str, usize),
) -> Term
{
    (__0)
}

#[allow(unused_variables)]
fn __action107<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, i64, usize),
) -> ::std::option::Option<i64>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action108<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::option::Option<i64>
{
    None
}

#[allow(unused_variables)]
fn __action109<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> ::std::vec::Vec<i64>
{
    vec![]
}

#[allow(unused_variables)]
fn __action110<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<i64>, usize),
) -> ::std::vec::Vec<i64>
{
    v
}

#[allow(unused_variables)]
fn __action111<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, i64, usize),
    (_, _, _): (usize, &'input str, usize),
) -> i64
{
    (__0)
}

#[allow(unused_variables)]
fn __action112<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, i64, usize),
) -> ::std::vec::Vec<i64>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action113<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<i64>, usize),
    (_, e, _): (usize, i64, usize),
) -> ::std::vec::Vec<i64>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action114<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action115<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action116<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action117<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Term>, usize),
    (_, e, _): (usize, Term, usize),
) -> ::std::vec::Vec<Term>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action118<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, Index, usize),
) -> ::std::vec::Vec<Index>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action119<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<Index>, usize),
    (_, e, _): (usize, Index, usize),
) -> ::std::vec::Vec<Index>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action120<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, String, usize),
) -> ::std::vec::Vec<String>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action121<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<String>, usize),
    (_, e, _): (usize, String, usize),
) -> ::std::vec::Vec<String>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action122<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, __0, _): (usize, (), usize),
) -> ::std::vec::Vec<()>
{
    vec![__0]
}

#[allow(unused_variables)]
fn __action123<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    (_, v, _): (usize, ::std::vec::Vec<()>, usize),
    (_, e, _): (usize, (), usize),
) -> ::std::vec::Vec<()>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action124<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Rational64, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Rational64, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Rational64, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, Rational64, usize),
    __12: (usize, &'input str, usize),
    __13: (usize, &'input str, usize),
) -> Init
{
    let __start0 = __13.0.clone();
    let __end0 = __13.2.clone();
    let __temp0 = __action74(
        defs,
        input,
        __13,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        defs,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action125<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, &'input str, usize),
    __1: (usize, &'input str, usize),
    __2: (usize, Rational64, usize),
    __3: (usize, &'input str, usize),
    __4: (usize, &'input str, usize),
    __5: (usize, Rational64, usize),
    __6: (usize, &'input str, usize),
    __7: (usize, &'input str, usize),
    __8: (usize, Rational64, usize),
    __9: (usize, &'input str, usize),
    __10: (usize, &'input str, usize),
    __11: (usize, Rational64, usize),
    __12: (usize, &'input str, usize),
) -> Init
{
    let __start0 = __12.2.clone();
    let __end0 = __12.2.clone();
    let __temp0 = __action75(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        defs,
        input,
        __0,
        __1,
        __2,
        __3,
        __4,
        __5,
        __6,
        __7,
        __8,
        __9,
        __10,
        __11,
        __12,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action126<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Term, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action93(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action91(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action127<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action93(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action128<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Index, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Index>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action88(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action118(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action129<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Index>, usize),
    __1: (usize, Index, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Index>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action88(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action119(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action130<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::option::Option<Index>, usize),
) -> Vec<Index>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action86(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        defs,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action131<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Index>, usize),
    __1: (usize, ::std::option::Option<Index>, usize),
) -> Vec<Index>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action87(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action71(
        defs,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action132<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, i64, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<i64>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action111(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action133<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<i64>, usize),
    __1: (usize, i64, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<i64>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action111(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action134<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::option::Option<i64>, usize),
) -> Vec<i64>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action109(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action66(
        defs,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action135<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<i64>, usize),
    __1: (usize, ::std::option::Option<i64>, usize),
) -> Vec<i64>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action110(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action66(
        defs,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action136<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, (), usize),
) -> ::std::vec::Vec<()>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action78(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action122(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action137<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<()>, usize),
    __1: (usize, (), usize),
) -> ::std::vec::Vec<()>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action78(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action123(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action138<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<()>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action76(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action73(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action139<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<()>, usize),
) -> Vec<()>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action77(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action73(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action140<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, String, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action83(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action120(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action141<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<String>, usize),
    __1: (usize, String, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<String>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action83(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action121(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action142<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::option::Option<String>, usize),
) -> Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        defs,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action143<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<String>, usize),
    __1: (usize, ::std::option::Option<String>, usize),
) -> Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action82(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action72(
        defs,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action144<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Term, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action96(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action116(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action145<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action96(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action117(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action146<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action94(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        defs,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action147<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action95(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action69(
        defs,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action148<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Term, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action106(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action104(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action149<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action106(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action105(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action150<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Term, usize),
    __1: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action101(
        defs,
        input,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action151<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
    __2: (usize, &'input str, usize),
) -> ::std::vec::Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action101(
        defs,
        input,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action115(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action152<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action99(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        defs,
        input,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action153<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, ::std::option::Option<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action100(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action68(
        defs,
        input,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action154<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
) -> Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action89(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action70(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action155<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action90(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action70(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action156<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Index, usize),
) -> Vec<Index>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action84(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action157<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Index>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action85(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action130(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action158<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Index>, usize),
    __1: (usize, Index, usize),
) -> Vec<Index>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action84(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action159<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Index>, usize),
) -> Vec<Index>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action85(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action131(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action160<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, i64, usize),
) -> Vec<i64>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action107(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action161<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<i64>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action108(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action134(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action162<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<i64>, usize),
    __1: (usize, i64, usize),
) -> Vec<i64>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action107(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action163<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<i64>, usize),
) -> Vec<i64>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action108(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action135(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action164<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, String, usize),
) -> Vec<String>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action79(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action165<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<String>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action80(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action142(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action166<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<String>, usize),
    __1: (usize, String, usize),
) -> Vec<String>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action79(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action167<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<String>, usize),
) -> Vec<String>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action143(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action168<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Term, usize),
) -> Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action102(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action169<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Term>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action103(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action146(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action170<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
) -> Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action102(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action171<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action147(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action172<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
) -> Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action102(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action173<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action103(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action174<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, Term, usize),
) -> Vec<Term>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action97(
        defs,
        input,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action175<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Term>
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action98(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action152(
        defs,
        input,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action176<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
    __1: (usize, Term, usize),
) -> Vec<Term>
{
    let __start0 = __1.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action97(
        defs,
        input,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        defs,
        input,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action177<
    'input,
    'defs,
    'err,
>(
    defs: &'defs mut Defs,
    input: &'input str,
    __0: (usize, ::std::vec::Vec<Term>, usize),
) -> Vec<Term>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action98(
        defs,
        input,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action153(
        defs,
        input,
        __0,
        __temp0,
    )
}

pub trait __ToTriple<'input, 'defs, 'err, > {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>>;
}

impl<'input, 'defs, 'err, > __ToTriple<'input, 'defs, 'err, > for (usize, Token<'input>, usize) {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        Ok(value)
    }
}
impl<'input, 'defs, 'err, > __ToTriple<'input, 'defs, 'err, > for Result<(usize, Token<'input>, usize), &'static str> {
    fn to_triple(value: Self) -> Result<(usize,Token<'input>,usize), __lalrpop_util::ParseError<usize, Token<'input>, &'static str>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
