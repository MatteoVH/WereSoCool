{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1","program":"/Users/danny/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","ena","/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=3228d43cfbe03f6c","-C","extra-filename=-3228d43cfbe03f6c","--out-dir","/Users/danny/Documents/dev/WereSoCool/sound/e2e_tests/target/rls/debug/deps","-L","dependency=/Users/danny/Documents/dev/WereSoCool/sound/e2e_tests/target/rls/debug/deps","--extern","log=/Users/danny/Documents/dev/WereSoCool/sound/e2e_tests/target/rls/debug/deps/liblog-6d5f97c3a37b1457.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/danny/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/danny/Documents/dev/WereSoCool/sound/e2e_tests/target/rls/debug/deps/libena-3228d43cfbe03f6c.rmeta"},"prelude":{"crate_id":{"name":"ena","disambiguator":[6827051368654252549,18004105030637733404]},"crate_root":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src","external_crates":[{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15786589783347927115,14932276094748675792]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10298575208133357036,8040858178392247411]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12346914022686079705,4940267238012603511]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[18114786932049689441,12972308710781110595]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3450676385096259377,17670937522874515785]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[17577124700929205618,18199936732272738370]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12559880231068804868,15252340553816167694]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1187771448540952860,5203397268813630476]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[18283159763238190815,6626693072124271590]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[13458662043719537980,9570942752289014475]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[11980204761434995587,1127255387257643439]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[8467147480215253010,13194617755467267743]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8463084087322079994,16053869174229632260]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[16926090732921528503,7551031884587596916]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":15,"id":{"name":"log","disambiguator":[7610666599852295829,9018836771353890618]}},{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[13108862849322356157,4934792565465433374]}}],"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":467,"byte_end":719,"line_start":11,"line_end":23,"column_start":1,"column_end":15}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13205,"byte_end":13212,"line_start":39,"line_end":39,"column_start":29,"column_end":36},"alias_span":null,"name":"InPlace","value":"","parent":{"krate":0,"index":77}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13214,"byte_end":13230,"line_start":39,"line_end":39,"column_start":38,"column_end":54},"alias_span":null,"name":"UnificationStore","value":"","parent":{"krate":0,"index":77}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":467,"byte_end":719,"line_start":11,"line_end":23,"column_start":1,"column_end":15},"name":"","qualname":"::","value":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":77}],"decl_id":null,"docs":" An implementation of union-find. See the `unify` module for more\n details.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"snapshot_vec","qualname":"::snapshot_vec","value":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":223},{"krate":0,"index":235},{"krate":0,"index":9},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":48},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73}],"decl_id":null,"docs":" A utility class for implementing \"snapshottable\" things; a snapshottable data structure permits\n you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either\n to rollback to the start of the snapshot or commit those changes.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":225},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2134,"byte_end":2141,"line_start":31,"line_end":31,"column_start":5,"column_end":12},"name":"NewElem","qualname":"::snapshot_vec::UndoLog::NewElem","value":"UndoLog::NewElem(usize)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" New variable with given index was created.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":228},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2225,"byte_end":2232,"line_start":34,"line_end":34,"column_start":5,"column_end":12},"name":"SetElem","qualname":"::snapshot_vec::UndoLog::SetElem","value":"UndoLog::SetElem(usize, D::Value)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Variable with given index was changed *from* the given value.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":232},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2290,"byte_end":2295,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"Other","qualname":"::snapshot_vec::UndoLog::Other","value":"UndoLog::Other(D::Undo)","parent":{"krate":0,"index":223},"children":[],"decl_id":null,"docs":" Extensible set of actions\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":223},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2045,"byte_end":2052,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"UndoLog","qualname":"::snapshot_vec::UndoLog","value":"UndoLog::{NewElem, SetElem, Other}","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":232}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2320,"byte_end":2331,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"SnapshotVec","qualname":"::snapshot_vec::SnapshotVec","value":"SnapshotVec {  }","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2981,"byte_end":2989,"line_start":62,"line_end":62,"column_start":12,"column_end":20},"name":"Snapshot","qualname":"::snapshot_vec::Snapshot","value":"Snapshot {  }","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3187,"byte_end":3206,"line_start":69,"line_end":69,"column_start":11,"column_end":30},"name":"SnapshotVecDelegate","qualname":"::snapshot_vec::SnapshotVecDelegate","value":"SnapshotVecDelegate","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":21},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3218,"byte_end":3223,"line_start":70,"line_end":70,"column_start":10,"column_end":15},"name":"Value","qualname":"::snapshot_vec::SnapshotVecDelegate::Value","value":"type Value;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":22},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3234,"byte_end":3238,"line_start":71,"line_end":71,"column_start":10,"column_end":14},"name":"Undo","qualname":"::snapshot_vec::SnapshotVecDelegate::Undo","value":"type Undo;","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3248,"byte_end":3255,"line_start":73,"line_end":73,"column_start":8,"column_end":15},"name":"reverse","qualname":"::snapshot_vec::SnapshotVecDelegate::reverse","value":"fn (values: &mut Vec<Self::Value>, action: Self::Undo) -> ()","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3653,"byte_end":3656,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<SnapshotVec<D>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3711,"byte_end":3724,"line_start":92,"line_end":92,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SnapshotVec<D>>::with_capacity","value":"fn (c: usize) -> SnapshotVec<D>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3996,"byte_end":4002,"line_start":104,"line_end":104,"column_start":12,"column_end":18},"name":"record","qualname":"<SnapshotVec<D>>::record","value":"fn (&mut self, action: D::Undo) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4140,"byte_end":4143,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"len","qualname":"<SnapshotVec<D>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4206,"byte_end":4210,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"push","qualname":"<SnapshotVec<D>>::push","value":"fn (&mut self, elem: D::Value) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4438,"byte_end":4441,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"get","qualname":"<SnapshotVec<D>>::get","value":"fn (&self, index: usize) -> &D::Value","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4589,"byte_end":4596,"line_start":130,"line_end":130,"column_start":12,"column_end":19},"name":"reserve","qualname":"<SnapshotVec<D>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve space for new values, just like an ordinary vec.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":4951,"byte_end":4958,"line_start":138,"line_end":138,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SnapshotVec<D>>::get_mut","value":"fn (&mut self, index: usize) -> &mut D::Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\n automatically, so you should be sure call `record()` with some sort of suitable undo\n action.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5182,"byte_end":5185,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"set","qualname":"<SnapshotVec<D>>::set","value":"fn (&mut self, index: usize, new_elem: D::Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates the element at the given index. The old value will saved (and perhaps restored) if\n a snapshot is active.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5555,"byte_end":5562,"line_start":153,"line_end":153,"column_start":12,"column_end":19},"name":"set_all","qualname":"<SnapshotVec<D>>::set_all","value":"fn (&mut self, mut new_elems: impl FnMut(usize) -> D::Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Updates all elements. Potentially more efficient -- but\n otherwise equivalent to -- invoking `set` for each element.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":5927,"byte_end":5933,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"update","qualname":"<SnapshotVec<D>>::update","value":"fn <OP> (&mut self, index: usize, op: OP) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":6257,"byte_end":6271,"line_start":177,"line_end":177,"column_start":12,"column_end":26},"name":"start_snapshot","qualname":"<SnapshotVec<D>>::start_snapshot","value":"fn (&mut self) -> Snapshot","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":6469,"byte_end":6491,"line_start":185,"line_end":185,"column_start":12,"column_end":34},"name":"actions_since_snapshot","qualname":"<SnapshotVec<D>>::actions_since_snapshot","value":"fn (&self, snapshot: &Snapshot) -> &[UndoLog<D>]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":6849,"byte_end":6860,"line_start":195,"line_end":195,"column_start":12,"column_end":23},"name":"rollback_to","qualname":"<SnapshotVec<D>>::rollback_to","value":"fn (&mut self, snapshot: Snapshot) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":7653,"byte_end":7659,"line_start":222,"line_end":222,"column_start":12,"column_end":18},"name":"commit","qualname":"<SnapshotVec<D>>::commit","value":"fn (&mut self, snapshot: Snapshot) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Commits all changes since the last snapshot. Of course, they\n can still be undone if there is a snapshot further out.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":77},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"unify","qualname":"::unify","value":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":259},{"krate":0,"index":261},{"krate":0,"index":263},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":271},{"krate":0,"index":268},{"krate":0,"index":280},{"krate":0,"index":289},{"krate":0,"index":286},{"krate":0,"index":283},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":161},{"krate":0,"index":169},{"krate":0,"index":192},{"krate":0,"index":216},{"krate":0,"index":219}],"decl_id":null,"docs":" Union-find implementation. The main type is `UnificationTable`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32107,"byte_end":32123,"line_start":16,"line_end":16,"column_start":11,"column_end":27},"name":"UnificationStore","qualname":"::unify::backing_vec::UnificationStore","value":"UnificationStore: ops::Index<usize, Output = VarValue<Key<Self>>> + Clone + Default","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":108}],"decl_id":null,"docs":" Largely internal trait implemented by the unification table\n backing store types. The most common such type is `InPlace`,\n which indicates a standard, mutable unification table.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":94},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32206,"byte_end":32209,"line_start":19,"line_end":19,"column_start":10,"column_end":13},"name":"Key","qualname":"::unify::backing_vec::UnificationStore::Key","value":"type Key: UnifyKey<Value = Self::Value>;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":95},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32251,"byte_end":32256,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"name":"Value","qualname":"::unify::backing_vec::UnificationStore::Value","value":"type Value: UnifyValue;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32279,"byte_end":32287,"line_start":21,"line_end":21,"column_start":10,"column_end":18},"name":"Snapshot","qualname":"::unify::backing_vec::UnificationStore::Snapshot","value":"type Snapshot;","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32297,"byte_end":32311,"line_start":23,"line_end":23,"column_start":8,"column_end":22},"name":"start_snapshot","qualname":"::unify::backing_vec::UnificationStore::start_snapshot","value":"fn (&mut self) -> Self::Snapshot","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32350,"byte_end":32361,"line_start":25,"line_end":25,"column_start":8,"column_end":19},"name":"rollback_to","qualname":"::unify::backing_vec::UnificationStore::rollback_to","value":"fn (&mut self, snapshot: Self::Snapshot) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32408,"byte_end":32414,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"commit","qualname":"::unify::backing_vec::UnificationStore::commit","value":"fn (&mut self, snapshot: Self::Snapshot) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32461,"byte_end":32482,"line_start":29,"line_end":29,"column_start":8,"column_end":29},"name":"values_since_snapshot","qualname":"::unify::backing_vec::UnificationStore::values_since_snapshot","value":"fn (&self, snapshot: &Self::Snapshot) -> Range<usize>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32542,"byte_end":32560,"line_start":31,"line_end":31,"column_start":8,"column_end":26},"name":"reset_unifications","qualname":"::unify::backing_vec::UnificationStore::reset_unifications","value":"fn (&mut self, value: impl FnMut(u32) -> VarValue<Self::Key>) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32651,"byte_end":32654,"line_start":36,"line_end":36,"column_start":8,"column_end":11},"name":"len","qualname":"::unify::backing_vec::UnificationStore::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32680,"byte_end":32684,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"push","qualname":"::unify::backing_vec::UnificationStore::push","value":"fn (&mut self, value: VarValue<Self::Key>) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32733,"byte_end":32740,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"reserve","qualname":"::unify::backing_vec::UnificationStore::reserve","value":"fn (&mut self, num_new_values: usize) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32784,"byte_end":32790,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"update","qualname":"::unify::backing_vec::UnificationStore::update","value":"fn <F> (&mut self, index: usize, op: F) -> ()","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32885,"byte_end":32888,"line_start":45,"line_end":45,"column_start":8,"column_end":11},"name":"tag","qualname":"::unify::backing_vec::UnificationStore::tag","value":"fn () -> &'static str","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":238},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33064,"byte_end":33071,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"InPlace","qualname":"::unify::backing_vec::InPlace","value":"InPlace {  }","parent":null,"children":[{"krate":0,"index":240}],"decl_id":null,"docs":" Backing store for an in-place unification table.\n Not typically used directly.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":141},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13867,"byte_end":13875,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"UnifyKey","qualname":"::unify::UnifyKey","value":"UnifyKey: Copy + Clone + Debug + PartialEq","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146}],"decl_id":null,"docs":" This trait is implemented by any type that can serve as a type\n variable. We call such variables *unification keys*. For example,\n this trait is implemented by `IntVid`, which represents integral\n variables.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":142},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13921,"byte_end":13926,"line_start":60,"line_end":60,"column_start":10,"column_end":15},"name":"Value","qualname":"::unify::UnifyKey::Value","value":"type Value: UnifyValue;","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13948,"byte_end":13953,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"index","qualname":"::unify::UnifyKey::index","value":"fn (&self) -> u32","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13977,"byte_end":13987,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"from_index","qualname":"::unify::UnifyKey::from_index","value":"fn (u: u32) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14013,"byte_end":14016,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"tag","qualname":"::unify::UnifyKey::tag","value":"fn () -> &'static str","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14824,"byte_end":14835,"line_start":82,"line_end":82,"column_start":8,"column_end":19},"name":"order_roots","qualname":"::unify::UnifyKey::order_roots","value":"fn (a: Self, a_value: &Self::Value, b: Self, b_value: &Self::Value) -> Option<(Self, Self)>","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" If true, then `self` should be preferred as root to `other`.\n Note that we assume a consistent partial ordering, so\n returning true implies that `other.prefer_as_root_to(self)`\n would return false.  If there is no ordering between two keys\n (i.e., `a.prefer_as_root_to(b)` and `b.prefer_as_root_to(a)`\n both return false) then the rank will be used to determine the\n root in an optimal way.","sig":null,"attributes":[{"value":"allow(unused_variables)","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":14790,"byte_end":14816,"line_start":81,"line_end":81,"column_start":5,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15718,"byte_end":15728,"line_start":106,"line_end":106,"column_start":11,"column_end":21},"name":"UnifyValue","qualname":"::unify::UnifyValue","value":"UnifyValue: Clone + Debug","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" Trait implemented for **values** associated with a unification\n key. This trait defines how to merge the values from two keys that\n are unioned together. This merging can be fallible. If you attempt\n to union two keys whose values cannot be merged, then the error is\n propagated up and the two keys are not unioned.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16000,"byte_end":16005,"line_start":111,"line_end":111,"column_start":10,"column_end":15},"name":"Error","qualname":"::unify::UnifyValue::Error","value":"type Error;","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Defines the type to return when merging of two values fails.\n If merging is infallible, use the special struct `NoError`\n found in this crate, which unlocks various more convenient\n methods on the unification table.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16132,"byte_end":16144,"line_start":115,"line_end":115,"column_start":8,"column_end":20},"name":"unify_values","qualname":"::unify::UnifyValue::unify_values","value":"fn (value1: &Self, value2: &Self) -> Result<Self, Self::Error>","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" Given two values, produce a new value that combines them.\n If that is not possible, produce an error.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16816,"byte_end":16828,"line_start":129,"line_end":129,"column_start":11,"column_end":23},"name":"EqUnifyValue","qualname":"::unify::EqUnifyValue","value":"EqUnifyValue: Eq + Clone + Debug","parent":null,"children":[],"decl_id":null,"docs":" A convenient helper for unification values which must be equal or\n else an error occurs. For example, if you are unifying types in a\n simple functional language, this may be appropriate, since (e.g.)\n you can't unify a type variable bound to `int` with one bound to\n `float` (but you can unify two type variables both bound to\n `int`).","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":259},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17272,"byte_end":17279,"line_start":146,"line_end":146,"column_start":12,"column_end":19},"name":"NoError","qualname":"::unify::NoError","value":"NoError {  }","parent":null,"children":[{"krate":0,"index":260}],"decl_id":null,"docs":" A struct which can never be instantiated. Used\n for the error type for infallible cases.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":263},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":17888,"byte_end":17896,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"VarValue","qualname":"::unify::VarValue","value":"VarValue {  }","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267}],"decl_id":null,"docs":" Value of a unification key. We implement Tarjan's union-find\n algorithm: when two keys are unified, one of them is converted\n into a \"redirect\" pointing at the other. These redirects form a\n DAG: the roots of the DAG (nodes that are not redirected) are each\n associated with a value of type `V` and a rank. The rank is used\n to keep the DAG relatively balanced, which helps keep the running\n time of the algorithm under control. For more information, see\n <http://en.wikipedia.org/wiki/Disjoint-set_data_structure>.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":280},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":18938,"byte_end":18954,"line_start":179,"line_end":179,"column_start":12,"column_end":28},"name":"UnificationTable","qualname":"::unify::UnificationTable","value":"UnificationTable {  }","parent":null,"children":[{"krate":0,"index":282}],"decl_id":null,"docs":" Table of unification keys and their values. You must define a key type K\n that implements the `UnifyKey` trait. Unification tables can be used in two-modes:","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":155},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19138,"byte_end":19161,"line_start":186,"line_end":186,"column_start":10,"column_end":33},"name":"InPlaceUnificationTable","qualname":"::unify::InPlaceUnificationTable","value":"UnificationTable<InPlace<K>>","parent":null,"children":[],"decl_id":null,"docs":" A unification table that uses an \"in-place\" vector.\n","sig":null,"attributes":[{"value":"allow(type_alias_bounds)","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19101,"byte_end":19128,"line_start":185,"line_end":185,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19563,"byte_end":19571,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"Snapshot","qualname":"::unify::Snapshot","value":"Snapshot {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":" At any time, users may snapshot a unification table.  The changes\n made during the snapshot may either be *committed* or *rolled back*.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20770,"byte_end":20773,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"new","qualname":"<UnificationTable<S>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20948,"byte_end":20956,"line_start":248,"line_end":248,"column_start":12,"column_end":20},"name":"snapshot","qualname":"<UnificationTable<S>>::snapshot","value":"fn (&mut self) -> Snapshot<S>","parent":null,"children":[],"decl_id":null,"docs":" Starts a new snapshot. Each snapshot must be either\n rolled back or committed in a \"LIFO\" (stack) order.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21249,"byte_end":21260,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"rollback_to","qualname":"<UnificationTable<S>>::rollback_to","value":"fn (&mut self, snapshot: Snapshot<S>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses all changes since the last snapshot. Also\n removes any keys that have been created since then.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21547,"byte_end":21553,"line_start":264,"line_end":264,"column_start":12,"column_end":18},"name":"commit","qualname":"<UnificationTable<S>>::commit","value":"fn (&mut self, snapshot: Snapshot<S>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Commits all changes since the last snapshot. Of course, they\n can still be undone if there is a snapshot further out.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":21747,"byte_end":21754,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"new_key","qualname":"<UnificationTable<S>>::new_key","value":"fn (&mut self, value: S::Value) -> S::Key","parent":null,"children":[],"decl_id":null,"docs":" Creates a fresh key with the given value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22175,"byte_end":22182,"line_start":280,"line_end":280,"column_start":12,"column_end":19},"name":"reserve","qualname":"<UnificationTable<S>>::reserve","value":"fn (&mut self, num_new_keys: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserve memory for `num_new_keys` to be created. Does not\n actually create the new keys; you must then invoke `new_key`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22438,"byte_end":22456,"line_start":287,"line_end":287,"column_start":12,"column_end":30},"name":"reset_unifications","qualname":"<UnificationTable<S>>::reset_unifications","value":"fn (&mut self, mut value: impl FnMut(S::Key) -> S::Value) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears all unifications that have been performed, resetting to\n the initial state. The values of each variable are given by\n the closure.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22794,"byte_end":22797,"line_start":299,"line_end":299,"column_start":12,"column_end":15},"name":"len","qualname":"<UnificationTable<S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of keys created so far.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":22932,"byte_end":22951,"line_start":304,"line_end":304,"column_start":12,"column_end":31},"name":"vars_since_snapshot","qualname":"<UnificationTable<S>>::vars_since_snapshot","value":"fn (&self, snapshot: &Snapshot<S>) -> Range<S::Key>","parent":null,"children":[],"decl_id":null,"docs":" Returns the keys of all variables created since the `snapshot`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28100,"byte_end":28105,"line_start":445,"line_end":445,"column_start":12,"column_end":17},"name":"union","qualname":"<UnificationTable<S>>::union","value":"fn <K1, K2> (&mut self, a_id: K1, b_id: K2) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unions two keys without the possibility of failure; only\n applicable when unify values use `NoError` as their error\n type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28464,"byte_end":28475,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"union_value","qualname":"<UnificationTable<S>>::union_value","value":"fn <K1> (&mut self, id: K1, value: V) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Unions a key and a value without the possibility of failure;\n only applicable when unify values use `NoError` as their error\n type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28729,"byte_end":28736,"line_start":466,"line_end":466,"column_start":12,"column_end":19},"name":"unioned","qualname":"<UnificationTable<S>>::unioned","value":"fn <K1, K2> (&mut self, a_id: K1, b_id: K2) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Given two keys, indicates whether they have been unioned together.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":28956,"byte_end":28960,"line_start":475,"line_end":475,"column_start":12,"column_end":16},"name":"find","qualname":"<UnificationTable<S>>::find","value":"fn <K1> (&mut self, id: K1) -> K","parent":null,"children":[],"decl_id":null,"docs":" Given a key, returns the (current) root key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29273,"byte_end":29286,"line_start":486,"line_end":486,"column_start":12,"column_end":25},"name":"unify_var_var","qualname":"<UnificationTable<S>>::unify_var_var","value":"fn <K1, K2> (&mut self, a_id: K1, b_id: K2) -> Result<(), V::Error>","parent":null,"children":[],"decl_id":null,"docs":" Unions together two variables, merging their values. If\n merging the values fails, the error is propagated and this\n method has no effect.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":29925,"byte_end":29940,"line_start":508,"line_end":508,"column_start":12,"column_end":27},"name":"unify_var_value","qualname":"<UnificationTable<S>>::unify_var_value","value":"fn <K1> (&mut self, a_id: K1, b: V) -> Result<(), V::Error>","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the key `a_id` to `b`, attempting to merge\n with the previous value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30423,"byte_end":30434,"line_start":521,"line_end":521,"column_start":12,"column_end":23},"name":"probe_value","qualname":"<UnificationTable<S>>::probe_value","value":"fn <K1> (&mut self, id: K1) -> V","parent":null,"children":[],"decl_id":null,"docs":" Returns the current value for the given key. If the key has\n been union'd, this will give the value from the current root.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30647,"byte_end":30666,"line_start":530,"line_end":530,"column_start":12,"column_end":31},"name":"inlined_probe_value","qualname":"<UnificationTable<S>>::inlined_probe_value","value":"fn <K1> (&mut self, id: K1) -> V","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":30618,"byte_end":30635,"line_start":529,"line_end":529,"column_start":5,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2473,"byte_end":2484,"line_start":46,"line_end":46,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3410,"byte_end":3421,"line_start":77,"line_end":77,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3625,"byte_end":3636,"line_start":87,"line_end":87,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8186,"byte_end":8197,"line_start":239,"line_end":239,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8348,"byte_end":8359,"line_start":246,"line_end":246,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8500,"byte_end":8511,"line_start":252,"line_end":252,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8681,"byte_end":8692,"line_start":259,"line_end":259,"column_start":55,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8846,"byte_end":8857,"line_start":265,"line_end":265,"column_start":51,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9263,"byte_end":9274,"line_start":280,"line_end":280,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9580,"byte_end":9587,"line_start":294,"line_end":294,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33219,"byte_end":33226,"line_start":58,"line_end":58,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33358,"byte_end":33365,"line_start":64,"line_end":64,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34605,"byte_end":34612,"line_start":119,"line_end":119,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34873,"byte_end":34881,"line_start":131,"line_end":131,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16890,"byte_end":16891,"line_start":131,"line_end":131,"column_start":38,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19743,"byte_end":19751,"line_start":201,"line_end":201,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20737,"byte_end":20753,"line_start":241,"line_end":241,"column_start":27,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":27824,"byte_end":27840,"line_start":436,"line_end":436,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":31104,"byte_end":31110,"line_start":551,"line_end":551,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":691,"byte_end":703,"line_start":22,"line_end":22,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/lib.rs","byte_start":713,"byte_end":718,"line_start":23,"line_end":23,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":77}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":2473,"byte_end":2484,"line_start":46,"line_end":46,"column_start":24,"column_end":35},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":7636}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3410,"byte_end":3421,"line_start":77,"line_end":77,"column_start":42,"column_end":53},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":3625,"byte_end":3636,"line_start":87,"line_end":87,"column_start":30,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":9},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8186,"byte_end":8197,"line_start":239,"line_end":239,"column_start":45,"column_end":56},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":1704}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8348,"byte_end":8359,"line_start":246,"line_end":246,"column_start":48,"column_end":59},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":1715}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8500,"byte_end":8511,"line_start":252,"line_end":252,"column_start":52,"column_end":63},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8681,"byte_end":8692,"line_start":259,"line_end":259,"column_start":55,"column_end":66},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":1784}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":8846,"byte_end":8857,"line_start":265,"line_end":265,"column_start":51,"column_end":62},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":3960}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9263,"byte_end":9274,"line_start":280,"line_end":280,"column_start":40,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":9},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/snapshot_vec.rs","byte_start":9580,"byte_end":9587,"line_start":294,"line_end":294,"column_start":40,"column_end":47},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":223},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32134,"byte_end":32139,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32179,"byte_end":32184,"line_start":17,"line_end":17,"column_start":55,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":32187,"byte_end":32194,"line_start":17,"line_end":17,"column_start":63,"column_end":70},"kind":"SuperTrait","from":{"krate":2,"index":2206},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33219,"byte_end":33226,"line_start":58,"line_end":58,"column_start":31,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":33358,"byte_end":33365,"line_start":64,"line_end":64,"column_start":40,"column_end":47},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":238},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34605,"byte_end":34612,"line_start":119,"line_end":119,"column_start":31,"column_end":38},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":238},"to":{"krate":2,"index":1780}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/backing_vec.rs","byte_start":34873,"byte_end":34881,"line_start":131,"line_end":131,"column_start":47,"column_end":55},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":247},"to":{"krate":0,"index":20}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13877,"byte_end":13881,"line_start":59,"line_end":59,"column_start":21,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1543},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13884,"byte_end":13889,"line_start":59,"line_end":59,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13892,"byte_end":13897,"line_start":59,"line_end":59,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":7636},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":13900,"byte_end":13909,"line_start":59,"line_end":59,"column_start":44,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":2040},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15730,"byte_end":15735,"line_start":106,"line_end":106,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":15738,"byte_end":15743,"line_start":106,"line_end":106,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":7636},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16830,"byte_end":16832,"line_start":129,"line_end":129,"column_start":25,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2045},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16835,"byte_end":16840,"line_start":129,"line_end":129,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":2181},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16843,"byte_end":16848,"line_start":129,"line_end":129,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":7636},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":16890,"byte_end":16891,"line_start":131,"line_end":131,"column_start":38,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":152},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":19743,"byte_end":19751,"line_start":201,"line_end":201,"column_start":19,"column_end":27},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":263},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":20737,"byte_end":20753,"line_start":241,"line_end":241,"column_start":27,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":27824,"byte_end":27840,"line_start":436,"line_end":436,"column_start":15,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/danny/.cargo/registry/src/github.com-1ecc6299db9ec823/ena-0.13.1/src/unify/mod.rs","byte_start":31104,"byte_end":31110,"line_start":551,"line_end":551,"column_start":36,"column_end":42},"kind":{"Impl":{"id":19}},"from":{"krate":2,"index":29481},"to":{"krate":0,"index":147}}]}