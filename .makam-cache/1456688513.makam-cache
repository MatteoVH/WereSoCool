(function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token \"|\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \"|\") syntax.op_base)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token "|") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token "|") syntax.op_base)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token "|") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token "|") syntax.op_base)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token \"AsIs\") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token \"Sequence\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"Overlay\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"O\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.overtone) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token \"Repeat\") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \")\") syntax.nil)))) nil))))))))) nil)))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("|", offset)
    ? (offset += "|".length, JSON.stringify("|"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_2}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token \"|\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \"|\") syntax.op_base)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token \"AsIs\") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token \"Sequence\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"Overlay\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"O\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.overtone) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token \"Repeat\") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \")\") syntax.nil)))) nil))))))))) nil)))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `nil`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (fun (x_1: ratio) => (fun (x_2: ratio) => (fun (x_3: ratio) => (compose (cons (map (freqmult x_0)) (cons (map (freqadd x_1)) (cons (map (gainmult x_2)) (cons (map (panadd x_3)) nil))))))))) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \")\") syntax.nil)))))))))) nil)) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (fun (x_1: ratio) => (fun (x_2: ratio) => (fun (x_3: ratio) => (compose (cons (map (freqmult x_0)) (cons (map (freqadd x_1)) (cons (map (gainmult x_2)) (cons (map (panadd x_3)) nil))))))))) (syntax.consignored (syntax.token "(") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ",") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ",") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ",") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ")") syntax.nil)))))))))) nil)) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (fun (x_1: ratio) => (fun (x_2: ratio) => (fun (x_3: ratio) => (compose (cons (map (freqmult x_0)) (cons (map (freqadd x_1)) (cons (map (gainmult x_2)) (cons (map (panadd x_3)) nil))))))))) (syntax.consignored (syntax.token "(") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ",") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ",") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ",") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token ")") syntax.nil)))))))))) nil)) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("(", offset)
    ? (offset += "(".length, JSON.stringify("("))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_2}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_3}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_4} ${result_5})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(")", offset)
    ? (offset += ")".length, JSON.stringify(")"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_5 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_5 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_6 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_6 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_5} ${result_6})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_4}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(compose (cons (map (freqmult ${result_0})) (cons (map (freqadd ${result_1})) (cons (map (gainmult ${result_2})) (cons (map (panadd ${result_3})) nil)))))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.token \",\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.overtone)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.token ",") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.overtone)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.token ",") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.overtone)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (fun (x_1: ratio) => (fun (x_2: ratio) => (fun (x_3: ratio) => (compose (cons (map (freqmult x_0)) (cons (map (freqadd x_1)) (cons (map (gainmult x_2)) (cons (map (panadd x_3)) nil))))))))) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \")\") syntax.nil)))))))))) nil)) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.token \",\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.overtone)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (fun (x_1: ratio) => (fun (x_2: ratio) => (fun (x_3: ratio) => (compose (cons (map (freqmult x_0)) (cons (map (freqadd x_1)) (cons (map (gainmult x_2)) (cons (map (panadd x_3)) nil))))))))) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \",\") (syntax.conscaptured syntax.zratio (syntax.consignored (syntax.token \")\") syntax.nil)))))))))) nil)) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `nil`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.overtone)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token \",\"))) pretty.empty) syntax.nil))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.overtone)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token ","))) pretty.empty) syntax.nil))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.overtone)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token ","))) pretty.empty) syntax.nil))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.token \",\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.overtone)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.overtone) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.token \",\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.op)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.token ",") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.op)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.token ",") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.op)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.token \",\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.op)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `nil`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.op)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token \",\"))) pretty.empty) syntax.nil))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.op)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token ","))) pretty.empty) syntax.nil))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token ",") syntax.op)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token ","))) pretty.empty) syntax.nil))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.token \",\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.op)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(",", offset)
    ? (offset += ",".length, JSON.stringify(","))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply "" syntax.nil) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply "" syntax.nil) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "0123456789".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_1}`, `${result_2}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `""`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) \"((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })\" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) "((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) "((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "0123456789".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_0}`, `${result_1}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return (((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); }))(`${result_0}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: int) => (fun (x_1: string) => (fraction x_0 x_1))) (syntax.cons (syntax.captured makam.int_literal_) (syntax.cons (syntax.exact \".\") (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: int) => (fun (x_1: string) => (fraction x_0 x_1))) (syntax.cons (syntax.captured makam.int_literal_) (syntax.cons (syntax.exact ".") (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: int) => (fun (x_1: string) => (fraction x_0 x_1))) (syntax.cons (syntax.captured makam.int_literal_) (syntax.cons (syntax.exact ".") (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) \"((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })\" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(".", offset)
    ? (offset += ".".length, JSON.stringify("."))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "0123456789".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_1}`, `${result_2}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(fraction ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.token syntax.frac_) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.token syntax.frac_) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.token syntax.frac_) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: int) => (fun (x_1: string) => (fraction x_0 x_1))) (syntax.cons (syntax.captured makam.int_literal_) (syntax.cons (syntax.exact \".\") (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax syntax.frac)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax syntax.frac)`;
      const historyEntry = `(peg.syntax syntax.frac):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.token syntax.frac_) nil)))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax makam.int_literal)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax makam.int_literal)`;
      const historyEntry = `(peg.syntax makam.int_literal):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const data = (function (input, offset) { return ((function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply "" syntax.nil) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply "" syntax.nil) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "0123456789".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_1}`, `${result_2}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `""`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) \"((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })\" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) "((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) "((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "0123456789".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.int_literal_char (syntax.charmany makam.int_literal_char)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_0}`, `${result_1}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return (((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); }))(`${result_0}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.transform (fun (x_0: string) => (fun (x_1: int) => (refl.fromstring x_0 x_1))) \"((x) => { if (x.length > 16) { console.error('bigints not supported in JavaScript yet; incorrect results expected'); return parseInt(JSON.parse(x).substring(0, 15)); }; return parseInt(JSON.parse(x)); })\" (fun (x_0: string) => (fun (x_1: int) => (tostring x_1 x_0))) (syntax.cons (syntax.captured (syntax.char_once_or_many makam.int_literal_char)) syntax.nil)) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })()); })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   }))(input, offset); })(input, offset);
        if (data.result !== null) offset = data.newOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = {
          result: data.result,
          newOffset: data.result === null ? keepOffset : data.newOffset
         };
        history = historyCopy;
        return data.result;
      }
     }),
   "peg.sratio": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.sratio`;
      const historyEntry = `peg.sratio:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax makam.int_literal)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("/", offset)
    ? (offset += "/".length, JSON.stringify("/"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax makam.int_literal)", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(ratio ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax syntax.frac)", args: {  } };
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax makam.int_literal)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(ratio ${result_0} 1)`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "peg.zratio": (function*(args) {
      const {  } = args;
      const memoEntry = `peg.zratio`;
      const historyEntry = `peg.zratio:${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("-", offset)
    ? (offset += "-".length, JSON.stringify("-"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "peg.sratio", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(rneg ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "peg.sratio", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = yield { parser: "peg.zratio", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (freqmult x_0)) (syntax.consignored (syntax.token \"Tm\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (freqadd x_0)) (syntax.consignored (syntax.token \"Ta\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (gainmult x_0)) (syntax.consignored (syntax.token \"Gain\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panmult x_0)) (syntax.consignored (syntax.token \"PanM\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panadd x_0)) (syntax.consignored (syntax.token \"PanA\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (lenmult x_0)) (syntax.consignored (syntax.token \"Length\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (silence x_0)) (syntax.consignored (syntax.token \"Silence\") (syntax.conscaptured syntax.zratio syntax.nil))) nil)))))))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (freqmult x_0)) (syntax.consignored (syntax.token "Tm") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (freqadd x_0)) (syntax.consignored (syntax.token "Ta") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (gainmult x_0)) (syntax.consignored (syntax.token "Gain") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panmult x_0)) (syntax.consignored (syntax.token "PanM") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panadd x_0)) (syntax.consignored (syntax.token "PanA") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (lenmult x_0)) (syntax.consignored (syntax.token "Length") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (silence x_0)) (syntax.consignored (syntax.token "Silence") (syntax.conscaptured syntax.zratio syntax.nil))) nil)))))))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (freqmult x_0)) (syntax.consignored (syntax.token "Tm") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (freqadd x_0)) (syntax.consignored (syntax.token "Ta") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (gainmult x_0)) (syntax.consignored (syntax.token "Gain") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panmult x_0)) (syntax.consignored (syntax.token "PanM") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panadd x_0)) (syntax.consignored (syntax.token "PanA") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (lenmult x_0)) (syntax.consignored (syntax.token "Length") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (silence x_0)) (syntax.consignored (syntax.token "Silence") (syntax.conscaptured syntax.zratio syntax.nil))) nil)))))))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Tm", offset)
    ? (offset += "Tm".length, JSON.stringify("Tm"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(freqmult ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Ta", offset)
    ? (offset += "Ta".length, JSON.stringify("Ta"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(freqadd ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Gain", offset)
    ? (offset += "Gain".length, JSON.stringify("Gain"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(gainmult ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("PanM", offset)
    ? (offset += "PanM".length, JSON.stringify("PanM"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(panmult ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("PanA", offset)
    ? (offset += "PanA".length, JSON.stringify("PanA"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(panadd ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Length", offset)
    ? (offset += "Length".length, JSON.stringify("Length"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(lenmult ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Silence", offset)
    ? (offset += "Silence".length, JSON.stringify("Silence"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.iso peg.zratio pretty.zratio) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(silence ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token \"AsIs\") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token \"Sequence\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"Overlay\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"O\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.overtone) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token \"Repeat\") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \")\") syntax.nil)))) nil))))))))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token "AsIs") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token "Sequence") (syntax.consignored (syntax.token "[") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token ",") syntax.op) (syntax.consignored (syntax.token "]") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token "Overlay") (syntax.consignored (syntax.token "[") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token ",") syntax.op) (syntax.consignored (syntax.token "]") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token "O") (syntax.consignored (syntax.token "[") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token ",") syntax.overtone) (syntax.consignored (syntax.token "]") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token "Repeat") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token "(") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token ")") syntax.nil)))) nil))))))))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token "AsIs") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token "Sequence") (syntax.consignored (syntax.token "[") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token ",") syntax.op) (syntax.consignored (syntax.token "]") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token "Overlay") (syntax.consignored (syntax.token "[") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token ",") syntax.op) (syntax.consignored (syntax.token "]") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token "O") (syntax.consignored (syntax.token "[") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token ",") syntax.overtone) (syntax.consignored (syntax.token "]") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token "Repeat") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token "(") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token ")") syntax.nil)))) nil))))))))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("AsIs", offset)
    ? (offset += "AsIs".length, JSON.stringify("AsIs"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `id`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: ratio) => (freqmult x_0)) (syntax.consignored (syntax.token \"Tm\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (freqadd x_0)) (syntax.consignored (syntax.token \"Ta\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (gainmult x_0)) (syntax.consignored (syntax.token \"Gain\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panmult x_0)) (syntax.consignored (syntax.token \"PanM\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (panadd x_0)) (syntax.consignored (syntax.token \"PanA\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (lenmult x_0)) (syntax.consignored (syntax.token \"Length\") (syntax.conscaptured syntax.zratio syntax.nil))) (cons (syntax.apply (fun (x_0: ratio) => (silence x_0)) (syntax.consignored (syntax.token \"Silence\") (syntax.conscaptured syntax.zratio syntax.nil))) nil)))))))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(map ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Sequence", offset)
    ? (offset += "Sequence".length, JSON.stringify("Sequence"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("[", offset)
    ? (offset += "[".length, JSON.stringify("["))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.op)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token \",\"))) pretty.empty) syntax.nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("]", offset)
    ? (offset += "]".length, JSON.stringify("]"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(seq ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Overlay", offset)
    ? (offset += "Overlay".length, JSON.stringify("Overlay"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("[", offset)
    ? (offset += "[".length, JSON.stringify("["))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.op)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token \",\"))) pretty.empty) syntax.nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("]", offset)
    ? (offset += "]".length, JSON.stringify("]"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(overlay ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("O", offset)
    ? (offset += "O".length, JSON.stringify("O"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("[", offset)
    ? (offset += "[".length, JSON.stringify("["))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.group (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \",\") syntax.overtone)) (syntax.cons (syntax.iso (peg.syntax (syntax.optunit (syntax.token \",\"))) pretty.empty) syntax.nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("]", offset)
    ? (offset += "]".length, JSON.stringify("]"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(overlay ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("Repeat", offset)
    ? (offset += "Repeat".length, JSON.stringify("Repeat"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax makam.int_literal)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(repeat ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax makam.ident)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(concrete.var (concrete.name vars ${result_0}))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("(", offset)
    ? (offset += "(".length, JSON.stringify("("))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(")", offset)
    ? (offset += ")".length, JSON.stringify(")"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token \"|\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \"|\") syntax.op_base)) syntax.nil)))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token "|") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token "|") syntax.op_base)) syntax.nil)))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token "|") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token "|") syntax.op_base)) syntax.nil)))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token \"AsIs\") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token \"Sequence\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"Overlay\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"O\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.overtone) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token \"Repeat\") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \")\") syntax.nil)))) nil))))))))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("|", offset)
    ? (offset += "|".length, JSON.stringify("|"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token \"|\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \"|\") syntax.op_base)) syntax.nil)))) (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.captured (syntax.apply nil syntax.nil)) syntax.nil))) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: list op) => (compose x_0)) (syntax.conscaptured (syntax.list_sep_plusplus (syntax.token \"|\") syntax.op_base) syntax.nil)) (cons syntax.op_base nil))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: list op) => (compose x_0)) (syntax.conscaptured (syntax.list_sep_plusplus (syntax.token "|") syntax.op_base) syntax.nil)) (cons syntax.op_base nil))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: list op) => (compose x_0)) (syntax.conscaptured (syntax.list_sep_plusplus (syntax.token "|") syntax.op_base) syntax.nil)) (cons syntax.op_base nil))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: list op) => (cons x_0 x_1))) (syntax.cons (syntax.captured syntax.op_base) (syntax.cons (syntax.token \"|\") (syntax.cons (syntax.captured (syntax.list_sep_plus (syntax.token \"|\") syntax.op_base)) syntax.nil)))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(compose ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: unit) => id) (syntax.conscaptured (syntax.token \"AsIs\") syntax.nil)) (cons (syntax.apply (fun (x_0: point_op) => (map x_0)) (syntax.conscaptured syntax.point_op syntax.nil)) (cons (syntax.apply (fun (x_0: list op) => (seq x_0)) (syntax.consignored (syntax.token \"Sequence\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"Overlay\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.op) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: list op) => (overlay x_0)) (syntax.consignored (syntax.token \"O\") (syntax.consignored (syntax.token \"[\") (syntax.conscaptured (syntax.list_sep_plus_opt (syntax.token \",\") syntax.overtone) (syntax.consignored (syntax.token \"]\") syntax.nil))))) (cons (syntax.apply (fun (x_0: int) => (repeat x_0)) (syntax.consignored (syntax.token \"Repeat\") (syntax.conscaptured makam.int_literal syntax.nil))) (cons (syntax.apply (fun (x_0: string) => (concrete.var (concrete.name vars x_0))) (syntax.conscaptured makam.ident syntax.nil)) (cons (syntax.apply (fun (x_0: op) => x_0) (syntax.consignored (syntax.token \"(\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \")\") syntax.nil)))) nil))))))))) nil)))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: op) => (fit x_0 (fitlength x_1)))) (syntax.conscaptured syntax.op_compose (syntax.consignored (syntax.token \">\") (syntax.consignored (syntax.token \"FitLength\") (syntax.conscaptured syntax.op_compose syntax.nil))))) (cons syntax.op_compose nil))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: op) => (fit x_0 (fitlength x_1)))) (syntax.conscaptured syntax.op_compose (syntax.consignored (syntax.token ">") (syntax.consignored (syntax.token "FitLength") (syntax.conscaptured syntax.op_compose syntax.nil))))) (cons syntax.op_compose nil))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: op) => (fit x_0 (fitlength x_1)))) (syntax.conscaptured syntax.op_compose (syntax.consignored (syntax.token ">") (syntax.consignored (syntax.token "FitLength") (syntax.conscaptured syntax.op_compose syntax.nil))))) (cons syntax.op_compose nil))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: list op) => (compose x_0)) (syntax.conscaptured (syntax.list_sep_plusplus (syntax.token \"|\") syntax.op_base) syntax.nil)) (cons syntax.op_base nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith(">", offset)
    ? (offset += ">".length, JSON.stringify(">"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("FitLength", offset)
    ? (offset += "FitLength".length, JSON.stringify("FitLength"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: list op) => (compose x_0)) (syntax.conscaptured (syntax.list_sep_plusplus (syntax.token \"|\") syntax.op_base) syntax.nil)) (cons syntax.op_base nil))) nil)))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(fit ${result_0} (fitlength ${result_1}))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: list op) => (compose x_0)) (syntax.conscaptured (syntax.list_sep_plusplus (syntax.token \"|\") syntax.op_base) syntax.nil)) (cons syntax.op_base nil))) nil)))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax makam.ident)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax makam.ident)`;
      const historyEntry = `(peg.syntax makam.ident):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const data = (function (input, offset) { return ((function (input, startOffset) {
      let offset = startOffset;
      const parsers = {
    "(peg.syntax (syntax.choices (cons (syntax.charcons makam.ident_rest (syntax.charmany makam.ident_rest)) (cons (syntax.apply \"\" syntax.nil) nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.charcons makam.ident_rest (syntax.charmany makam.ident_rest)) (cons (syntax.apply "" syntax.nil) nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.charcons makam.ident_rest (syntax.charmany makam.ident_rest)) (cons (syntax.apply "" syntax.nil) nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "abcdefghijklmnopqrstuvwxyz_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.ident_rest (syntax.charmany makam.ident_rest)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_1}`, `${result_2}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = `""`;
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.string_join makam.baseident \".\" makam.ident_) (cons makam.baseident nil))))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.string_join makam.baseident "." makam.ident_) (cons makam.baseident nil))))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.string_join makam.baseident "." makam.ident_) (cons makam.baseident nil)))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "abcdefghijklmnopqrstuvwxyz_".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.ident_rest (syntax.charmany makam.ident_rest)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_0}`, `${result_1}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && ".".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.string_join makam.baseident \".\" makam.ident_) (cons makam.baseident nil))))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b, c) => JSON.stringify(JSON.parse(a) + JSON.parse(b) + JSON.parse(c)))(`${result_0}`, `${result_1}`, `${result_2}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = ((offset < input.length && "abcdefghijklmnopqrstuvwxyz_".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.charcons makam.ident_rest (syntax.charmany makam.ident_rest)) (cons (syntax.apply \"\" syntax.nil) nil))))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (function(){return ((a, b) => JSON.stringify(JSON.parse(a) + JSON.parse(b)))(`${result_0}`, `${result_1}`);})();
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_0} ${result_1})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.string_join makam.baseident \".\" makam.ident_) (cons makam.baseident nil))))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_0}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })()); })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   }))(input, offset); })(input, offset);
        if (data.result !== null) offset = data.newOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = {
          result: data.result,
          newOffset: data.result === null ? keepOffset : data.newOffset
         };
        history = historyCopy;
        return data.result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token "=") (syntax.consignored (syntax.token "{") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token "}") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token "=") (syntax.consignored (syntax.token "{") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token "}") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax makam.ident)", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("=", offset)
    ? (offset += "=".length, JSON.stringify("="))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_1} ${result_2})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("{", offset)
    ? (offset += "{".length, JSON.stringify("{"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_1}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_1 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))", args: {  } };
     if (result_1 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_2} ${result_3})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = (yield* (function*() {
     const keepOffset = offset;
     const result = (input.startsWith("}", offset)
    ? (offset += "}".length, JSON.stringify("}"))
    : null);
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_3 = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
     if (result_3 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_4 = (yield* (function*() {
     let result = [];
     while (true) {
       const current = ((offset < input.length && " \n\t\r".includes(input[offset]))
     ? JSON.stringify(input[offset++])
     : null);
       if (current === null) break;
       else result.push(current);
     }
     return `[${result.join(", ")}]`;
   })());
     if (result_4 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(cons ${result_3} ${result_4})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = "unit";
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `unit`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `${result_2}`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
     if (result === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_2 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))", args: {  } };
     if (result_2 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(let ${result_1} (concrete.bindone (concrete.name vars ${result_0}) ${result_2}))`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (fun (x_1: op) => (fit x_0 (fitlength x_1)))) (syntax.conscaptured syntax.op_compose (syntax.consignored (syntax.token \">\") (syntax.consignored (syntax.token \"FitLength\") (syntax.conscaptured syntax.op_compose syntax.nil))))) (cons syntax.op_compose nil))) nil)))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (concrete x_0)) (syntax.conscaptured syntax.op syntax.nil)) nil)) nil)))": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (concrete x_0)) (syntax.conscaptured syntax.op syntax.nil)) nil)) nil)))`;
      const historyEntry = `(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (concrete x_0)) (syntax.conscaptured syntax.op syntax.nil)) nil)) nil))):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = (yield* (function*() {
     const keepOffset = offset;
     const result_0 = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: string) => (fun (x_1: op) => (fun (x_2: op) => (let x_1 (concrete.bindone (concrete.name vars x_0) x_2))))) (syntax.conscaptured makam.ident (syntax.consignored (syntax.token \"=\") (syntax.consignored (syntax.token \"{\") (syntax.conscaptured syntax.op (syntax.consignored (syntax.token \"}\") (syntax.conscaptured syntax.op syntax.nil))))))) (cons syntax.op_fit nil))) nil)))", args: {  } };
     if (result_0 === null) {
       offset = keepOffset;
       return null;
     } else {
       const result = `(concrete ${result_0})`;
       if (result === null) {
         offset = keepOffset;
         return null;
       } else return result;
     }
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   "(peg.syntax syntax.cop)": (function*(args) {
      const {  } = args;
      const memoEntry = `(peg.syntax syntax.cop)`;
      const historyEntry = `(peg.syntax syntax.cop):${offset}`;
      const keepOffset = offset;
      if (history.includes(historyEntry)) {
        throw new Error(`left recursion found: adding ${historyEntry} to ${history}`);
      }
      if (memoEntry in memoize && memoize[memoEntry][keepOffset] !== undefined) {
        const { result, newOffset } = memoize[memoEntry][keepOffset];
        offset = newOffset;
        return result;
      } else {
        let historyCopy = history.slice();
        history.push(historyEntry);
        const result = (yield* (function*() {
     const keepOffset = offset;
     
     {
       offset = keepOffset;
       const result = yield { parser: "(peg.syntax (syntax.choices (cons (syntax.choices (cons (syntax.apply (fun (x_0: op) => (concrete x_0)) (syntax.conscaptured syntax.op syntax.nil)) nil)) nil)))", args: {  } };
       if (result !== null) return result;
     }
     offset = keepOffset;
     return null;
   })());
        if (result === null) offset = keepOffset;
        if (!(memoEntry in memoize)) memoize[memoEntry] = {};
        memoize[memoEntry][keepOffset] = { result, newOffset: offset };
        history = historyCopy;
        return result;
      }
     }),
   
  };
      const memoize = {};
      let history = [];
      const firstGen = (function*() { return yield { parser: "(peg.syntax syntax.cop)", args: {  } }; })();
      const recurseOrResult = [ { gen: firstGen, val: firstGen.next() } ];
      let lastRes;
      while (recurseOrResult.length > 0) {
        const { gen: genTop, val: valTop } = recurseOrResult[recurseOrResult.length-1];
        if (valTop.done) {
          lastRes = valTop.value;
          recurseOrResult.pop();
          if (recurseOrResult.length > 0) {
            const { gen, val } = recurseOrResult[recurseOrResult.length - 1];
            recurseOrResult[recurseOrResult.length - 1] = { gen, val: gen.next(lastRes) };
          }
        } else {
          const nextGen = parsers[valTop.value.parser](valTop.value.args);
          recurseOrResult.push( {gen: nextGen, val: nextGen.next() } );
        }
      }
      if (lastRes === null) {
        return { result: null, newOffset: startOffset };
      } else {
        return { result: lastRes, newOffset: offset };
      }
   })